<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/en/zsh.xml,v 1.4 2007/02/02 21:23:41 cam Exp $ -->

<guide link="/doc/pl/zsh.xml" lang="pl">

<title>zsh - Podręcznik konfiguracji i instalacji.</title>

<author title="Autor">
  <mail link="hekonsek@gmail.com">Henryk Konsek</mail>
</author>
<author title="Autor">
  <mail link="morritt.andrew@gmail.com">Andrew Morritt</mail>
</author>
<author title="Redaktor">
  <mail link="chriswhite@gentoo.org">Chris White</mail>
</author>
<author title="Redaktor">
  <mail link="welp@gentoo.org">Peter Weller</mail>
</author>
<Author>
<author title="Tłumacz">
	<mail link="jacek@sabr.pl">Jacek Karolak</mail>
</author>

<abstract>
Ten podręcznik pokazuje jak szybko zainstalować i skonfigurować zsh. 
Po przeczytaniu tego dokumentu będziesz mógł używać wielu zaawansowanych
funkcji zsh takich jak dopełnianie poleceń za pomocą klawisza TAB,
poprawianie poleceń i zarządzanie wierszem poleceń.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>2</version>
<date>2006-10-18</date>

<chapter>
<title>Instalacja</title>
<section>
<title>Instalacja zsh</title>
<body>

<p>
Żeby zainstalować <c>zsh</c> w Gentoo, będziemy musieli skompilować:
<c>app-shells/zsh</c> (pakiet główny zsh) oraz
<c>app-shells/zsh-completion</c> (zbiór skryptów zapewniających  dopełnianie poleceń w zsh)
</p>

<pre caption="Kompilacja zsh">
# <i>emerge zsh zsh-completion</i>
</pre>

</body>
</section>
<section>
<title>Pierwsze kroki w zsh</title>
<body>

<p>
Kiedy uruchomisz <c>zsh</c> poraz pierwszy otrzmyasz przedstawioną niżej informacje.
Możesz ją pominąć, sworzymy plik konifguracyjny później.
</p>

<pre caption="Pomijanie konfiguracji zsh">
$ <i>zsh</i>
This is the Z Shell configuration function for new users, zsh-newuser-install.
You are seeing this message because you have no zsh startup files
(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory
~).  This function can help you with a few settings that should
make your use of the shell easier.

You can:

(q)  Quit and do nothing.  The function will be run again next time.

(0)  Exit, creating the file ~/.zshrc containing just a comment.
     That will prevent this function being run again.

(1)  Continue to the main menu.

--- Type one of the keys in parentheses --- <i>q</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Konfiguracja</title>
<section>
<title>Wstęp</title>
<body>

<p>
Aby uruchomić pojedyńczą sesję zsh, użyj komendy <c>zsh</c>,
aby <c>zsh</c> stało się domyślną powłoką zajrzyj do <uri link="#savingsettings">Zapisywanie ustawień</uri>. Po instalacji, <c>zsh</c> wydaje się być bardzo proste
i raczej ograniczone w kwesti funkcjonalności.Aby to zmienić musimy dokonać
kilku zmian w konfiguracji.
</p>

</body>
</section>
<section>
<title>Zaawansowane dopełnianie poleceń klawiszem TAB</title>
<body>

<p>
	Aby włączyć sławny system dopełniania poleceń klawiszem TAB w <c>zsh</c>,
musisz najpierw wykonac kilka poniższych komend:
</p>

<pre caption="Włączanie dopełniania">
% <i>autoload -U compinit</i>
% <i>compinit</i>
</pre>

<p>
Domyślnie styl dopełniania jest prosty i brzydki. Jeżeli chcesz aby był
ciut ładniejszy możesz użyć poniższych poleceń:
</p>

<pre caption="Upiększanie dopełniania">
% <i>zstyle ':completion:*:descriptions' format '%U%B%d%b%u'</i>
% <i>zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'</i>
</pre>

</body>
</section>
<section>
<title>Poprawianie komend</title>
<body>

<p>
Dobrym pomysłem jest również włączenie automatycznej poprawy wpisywanych poleceń poprzez:
</p>

<pre caption="Włączanie poprawiania komend">
% <i>setopt correctall</i>
</pre>

</body>
</section>
<section>
<title>Znak zachęty terminala</title>
<body>

<p>
	Znak zachęty na początku nie jest zachwycający, ale możemy to szybko i prosto zmienić.
	Po pierwsze musimy uruchomić obsługę jego zaawansowanych opcji:
</p>

<pre caption="Włączanie zaawansowanego znaku zachęty">
% <i>autoload -U promptinit</i>
% <i>promptinit</i>
</pre>

<p>
	Dostępne przykłady gotowych kompozycji znaków zachęty mogą być wylistowane za pomocą polecenia <c>prompt -p</c>.
	Teraz możemy aktywować nasz ulubiony poprzez:
</p>

<pre caption="Wybieranie przykładowego znaku zachęty">
<comment>(Zastąp gentoo wybranym przez Ciebie)</comment>
% <i>prompt gentoo</i>
</pre>

<note>
	Jeżeli jesteś zainteresowany innym znakiem zachęty, i nie chcesz oglądać
	każdego przykładu, możesz użyć <c>prompt -l</c> aby zobaczyć liste wszystkich
	możliwych.
</note>

<p>
	Oczywiście możesz stowrzyć własny. Żeby to zrobić musisz najpierw wyeksportować
	zmienną środowiskową PS1.
</p>

<pre caption="Prosty przykład własnego znaku zachęty">
% <i>export PS1="[Test Prompt] > "</i>
[Test Prompt] >
</pre>

<p>
	Istnieje możliwość stworzenia spersonalizowanego znaku zachęty,
	zsh umożliwia wstawienie wielu znaków specjalnych, dzięki którym
	możemy umieszczać wiele interesujących informacji.
	Kilka z nich pokazano poniżej:
</p>

<table>
<tr>
  <th>Znak specjalny</th>
  <th>Wyświetla</th>
</tr>
<tr>
  <ti>%T</ti>
  <ti>Czas systemowy (GG:MM)</ti>
</tr>
<tr>
  <ti>%*</ti>
  <ti>Czas systemowy (GG:MM:SS)</ti>
</tr>
<tr>
  <ti>%D</ti>
  <ti>Data (RR-MM-DD)</ti>
</tr>
<tr>
  <ti>%n</ti>
  <ti>Nazwa użytkownika</ti>
</tr>
<tr>
  <ti>%B - %b</ti>
  <ti>Rozpocznij - zakończ pogrubienie tekstu</ti>
</tr>
<tr>
  <ti>%U - %u</ti>
  <ti>Rozpocznij - zakończ podkreślenie tekstu</ti>
</tr>
<tr>
  <ti>%d</ti>
  <ti>Obecny katalog</ti>
</tr>
<tr>
  <ti>%~</ti>
  <ti>Your current working directory, względne do ~</ti>
</tr>
<tr>
  <ti>%M</ti>
  <ti>Nazwa komputera</ti>
</tr>
<tr>
  <ti>%m</ti>
  <ti>Nazwa komputera okrojona tylko do pierwszej części</ti>
</tr>
<tr>
  <ti>%l</ti>
  <ti>Obecna konsola</ti>
</tr>
</table>

<p>
	Te znaki specjalne mogą być również umieszczone w zmiennej środowiskowej PS1
	i zsh przetworzy je automatycznie.
</p>

<pre caption="Bardziej rozbudowany znak zachęty">
% <i>export PS1="[%* - %D] %d %% "</i>
[08:44:23 - 06-02-18] /home/username %
</pre>

</body>
</section>
<section>
<title>Historia</title>
<body>

	<p>
		Niestety, domyślnie konfiguracja zsh w Gentoo nie zawiera
		wsparcia dla historii komend. A pracowanie bez niej jest bardzo
		frustrujące. Wystarczy, że wyeksportujemy poniższe zmienne środowiskowe:
	</p>

<pre caption="Podstawowa konfiguracja historii poleceń">
% <i>export HISTSIZE=2000</i>
% <i>export HISTFILE="$HOME/.history"</i>

<comment>(Hisotria nie zostanie zapisana jeżeli nie wyeksportujemy poniższej zmiennej środowiskowej)</comment>
% <i>export SAVEHIST=$HISTSIZE</i>
</pre>

<!-- does not work
<p>
It is very comfortable to search commands in history using the up/down arrow
keys, especially after typing the few first letters of the desired command.
</p>

<p>
To enable this feature, enter the following commands:
</p>

<pre caption="Setting context searching">
% <i>bindkey `tput kcuu1` history-beginning-search-backward >/dev/null 2>&amp;1</i>
% <i>bindkey `tput kcud1` history-beginning-search-forward >/dev/null 2>&amp;1 </i>
</pre>

<p>
To try the above feature, try the following commands:
</p>

TODO: use commands that *are* in the history, i.e. commands from above samples

<pre caption="History searching based on the first letters of the commands">
<comment>(Do not press Enter after typing)</comment>
% <i>vim /etc/</i>
<comment>(Now press up arrow key)</comment>
% <i>vim /etc/fstab</i>
<comment>(Press up arrow key once again)</comment>
% <i>vim /etc/X11/xorg.conf</i>
</pre>
-->

<p>
	Aby zapobiec zapisywaniu w historii duplikatów już raz wpisanych poleceń (np. <c>ls -l</c>
	które jest wpisywane wielokrotnie w ciągu każdej sesji) wystarczy ustawić tą opcję
<c>hist_ignore_all_dups</c> 
</p>

<pre caption="Ustawianie ignorowania duplikatów">
% <i>setopt hist_ignore_all_dups</i>
</pre>

<p>
	Użyteczną sztuczką jest zapobieganie zapisywania w historii
	wybranych poleceń poprzedzając je pojedyńczą spacją
</p>

<pre caption="Zapobieganie zapisywaniu wybranych poleceń w historii">
% <i>setopt hist_ignore_space</i>

<comment>(Ta komenda nie zapisze się w historii, zwróć uwagę na spację która ją poprzedza.)</comment>
% <i> cat /proc/cpuinfo</i>
</pre>

</body>
</section>
<section>
<title>Różne ustawienia</title>
<body>

	<p>
		Możesz ustawić <c>autocd</c> jeżeli nie chcesz wpisywać polecenia <c>cd</c> do zmiany katalogu (na przykład: <c>/etc</c> zamiast <c>cd /etc</c>).
</p>

<pre caption="Włączanie opcjii autocd">
% <i>setopt autocd</i>
</pre>

<p>
	Jeżeli standardowy pochodzący z basha styl wpisywania nazw plików ze znakami specjalnymi (żeby pracować na kilku plikach jednocześnie -ang. globbing)
	możesz użyć opcji <c>extendedglob</c>. Dzięki temu będziesz mógł używać znaków specjalnych w nazwach plików tak jak w wyrażeniach regularnych.
</p>

<pre caption="Włączanie obsługi znaków specjalnych w nazwach plików">
% <i>setopt extendedglob</i>
</pre>

<p>
	Gdy zmienna powyżej jest ustawiona, masz możliwość wpisywania rozszerzonych nazw plików takich jak na przykład: <c>cp ^*.(tar|bz2|gz)</c>.
</p>

</body>
</section>
</chapter>

<chapter id="savingsettings">
<title>Zapisywanie ustawień</title>
<section>
<title>Zapisywanie ustawień zsh</title>
<body>

	<p>
		Kiedy już spersonalizujemy nasze <c>zsh</c>, 
		dobrym pomyslem jest zapisanie ustawionych opcjii jako 
		domyślnych dla <c>zsh</c>  w całym systemie.
		Jedną z możliwości jest zapisanie ustawień w skrypcie <path>/etc/zsh/zshrc</path>
		Możemy również zapisać je tylko dla naszego konta poprzez plik <path>~/.zshrc</path>.

</p>

<pre caption="Przykładowy plik zshrc">
#!/bin/zsh

# dopelnianie komend
autoload -U compinit
compinit

# poprawianie komend
setopt correctall

# znak zachety
autoload -U promptinit
promptinit
prompt gentoo
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Ustawianie zsh jako domyślnej powłoki</title>
<section>
<title>Opcje dla użytkowników z przywilejami superużytkownika</title>
<body>

	<p>
		Możemy zmienić powłokę dla każdego użytkownika poprzez polecenie <c>usermod</c>.
</p>

<pre caption="Ustawianie zsh jako domyślnej powłoki w usermod">
# <i>usermod -s /bin/zsh userlogin</i>
</pre>

</body>
</section>
<section>
<title>Alternatywa dla użytkowników bez praw superużytkownika</title>
<body>

	<p>
		Jeżeli administrator systemu (pomijając grzeczne prośby) odmawia
		ustawienia zsh jako Twojej głównej powłoki, możesz zmusić
		<c>bash</c> do włączania <c>zsh</c> podczas uruchamiania,
		wszystko co musisz zrobić to delikatnie zmodyfikować swój plik
<path>~/.bashrc</path>.
</p>

<pre caption="Przykładowy ~/.bashrc">
<comment>(Dodaj poniższe do swojego ~/.bashrc)</comment>
exec zsh
</pre>

<p>
	Inną metodą zmiany powłoki jest użycie polecenia <c>chsh</c>  (narzędzia
	używanego do zmiany powłoki użytkownika). Zwykły użytkownik może zmienić
	powłokę tylko dla swojego konta. Superużytkownik zaś może to zrobić dla 
	dowolnego użytkownika.
</p>

<pre caption="Zmiana powłoki na zsh na stałe poprzez chsh">
<comment>(W miejsce "nazwa_użytkownika" wpisz nazwe użytkownika, któremu chsh ma zmienić powłoke na zsh)</comment>
$ <i>chsh -s /bin/zsh nazwa_użytkownika</i>
</pre>

</body>
</section>
</chapter>
</guide>
