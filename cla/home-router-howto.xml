<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/home-router-howto.xml,v 1.26 2007/05/15 00:30:54 rane Exp $ -->

<guide link="/doc/pl/home-router-howto.xml" lang="pl">
<title>Konfiguracja routera</title>

<author title="Autor">
  <mail link="vapier@gentoo.org">Mike Frysinger</mail>
</author>
<author title="Tłumaczenie">
  <mail link="rane@gentoo.org">Łukasz Damentko</mail>
</author>

<abstract>
Krótki opis umożliwiający skonfigurowanie routera łączącego domową sieć z
Internetem.
</abstract>

<license/>

<version>1.38</version>
<date>2007-07-27</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
Budowa własnego routera ze starych niepotrzebnych części to spora oszczędność w
porównaniu z kupnem gotowego rozwiązania, np. firmy Linksys. Największą zaletą
takiej decyzji jest niemal całkowita kontrola nad połączeniem. Pozostałe
możliwości są zależne tylko od naszej wyobraźni.
</p>

<p>
W tym tekście omówimy konfigurowanie translacji adresów (NAT) na routerze (jądro
oraz iptables), dodawanie i konfigurację podstawowych usług (serwer nazw (DNS)
przez dnsmasq, dhcp przez dhcpd, ADSL przez ppp), a zakończymy na bardziej
wyszukanych i dających więcej satysfakcji usługach jak przekazywanie portów,
kształtowanie ruchu, serwery proxy/cachowanie, itp.
</p>

<p>
Jest kilka podstawowych wymagań jakie trzeba poznać przed rozpoczęciem pracy. Po
pierwsze potrzebny będzie komputer z co najmniej dwiema kartami sieciowymi. Do
tego przyda się znajomość ustawień połączenia sieciowego (IP, DNS, adres bramy,
nazwa użytkownika i hasło). Niezbędna jest również odrobina wolnego czasu i
zamiłowanie do Gentoo.
</p>

<p>
Konwencje użyte w tekście:
</p>

<ul>
  <li>eth0 - NIC podłączona do sieci lokalnej (LAN)</li>
  <li>eth1 - NIC podłączona do sieci rozległej (WAN)</li>
  <li>LAN korzysta z prywatnych adresów 192.168.0.xxx</li>
  <li>Router ma przypisany adres 192.168.0.1</li>
  <li>
    Router pracuje na jądrze Linux 2.4 lub 2.6. Jąder 2.0 i 2.2 nie
    wspieramy.
  </li>
</ul>

<impo>
W związku z zachowaniem środków ostrożności, zalecane jest wyłączenie wszystkich
niepotrzebnych usług na routerze do czasu uruchomienia firewalla. Aby przejrzeć
aktualnie uruchomione usługi, należy wykonać polecenie <c>rc-status</c>.
</impo>

</body>
</section>
</chapter>
<chapter>
<title>Konfiguracja jądra</title>
<section>
<body>

<p>
Jądro powinno posiadać sterowniki dla wszystkich używanych kart sieciowych. W
celu sprawdzenia czy odpowiednie sterowniki są włączone należy wykonać polecenie
<c>ifconfig</c>. Jego wynik może nieco różnić się od tego podanego poniżej, nie
jest to jednak wielkim problemem. Najważniejsze, że wyświetlą się interfejsy.
</p>

<pre caption="Sprawdzanie kart sieciowych">
# <i>ifconfig -a</i>
eth0      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B8
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:11 Base address:0x9800

eth1      Link encap:Ethernet  HWaddr 00:60:F5:07:07:B9
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:10 Base address:0x9400
</pre>

<p>
Jeśli nie pojawią się interfejsy obu kart sieciowych i nie jest się pewnym jakie
to są karty, warto uruchomić program <c>lspci | grep Ethernet</c> (instalowany
poleceniem <c>emerge pciutils</c>). Potem należy przejść do konfiguracji jądra
i dodać obsługę odpowiedniego sterownika.
</p>

<p>
Kolejne niezbędne moduły to obsługa iptables i NAT oraz - opcjonalnie -
kształtowania ruchu. Na liście poniżej znajdują się opcje wymagane (*), zalecane
(x) oraz dotyczące kształtowania ruchu (s). Bez znaczenia jest fakt, czy
wbudujemy je na stałe, czy też zbudujemy w postaci modułów. Jeśli jakiś moduł
będzie potrzebny to powinien zostać załadowany automatycznie. Sprawdzanie czy
wszystko co potrzebne się ładuje pozostawiamy jako rozrywkę dla czytelnika.
</p>

<pre caption="Opcje sieciowe">
Networking options  ---&gt;
   [*] TCP/IP networking
      [*] IP: advanced router
   [*] Network packet filtering (replaces ipchains)
<comment>Używając jądra 2.4.x, musimy zaznaczyć poniższą opcję dla DHCP:</comment>
   [*] Socket Filtering

   IP: Netfilter Configuration  ---&gt;
      [*] Connection tracking (required for masq/NAT)
         [x] FTP protocol support
         [x] IRC protocol support
      [*] IP tables support (required for filtering/masq/NAT)
         [*] IP range match support
         [x] MAC address match support
         [*] Multiple port match support
         [*] Packet filtering
            [*] REJECT target support
            [x] REDIRECT target support
         [*] Full NAT
            [*] MASQUERADE target support
         [s] Packet mangling
            [s] MARK target support
         [x] LOG target support

   QoS and/or fair queueing  ---&gt;
      [s] QoS and/or fair queueing
         [s] HTB packet scheduler
         [s] Ingress Qdisc

   [a] PPP (point-to-point protocol) support
      [a] PPP filtering
      [a] PPP support for async serial ports
      [a] PPP support for sync tty ports
      [a] PPP Deflate compression
      [a] PPP BSD-Compress compression
      [a] PPP over Ethernet
</pre>

<note>
Pomiędzy jądrami serii 2.4 i 2.6 mogą pojawić się nieznaczne różnice, wierzymy
jednak, że czytelnicy poradzą sobie z nimi wszystkimi. Nawet pomiędzy
poszczególnymi wydaniami jądra 2.6 niektóre z tych opcji są przemieszczane.
Powodzenia!
</note>

</body>
</section>
</chapter>
<chapter>
<title>WAN (czyli Internet)</title>
<section>
<title>Wstęp</title>
<body>

<p>
Istnieje wiele różnych sposobów na łączenie się z Internetem, zajmiemy się
jednak tylko tym, na którym znam się najlepiej, czyli ADSL (PPPoE). Jeśli ktoś
posiada rozsądny opis związany z innymi typami połączeń może mi go podesłać.
Niektóre akapity mogą nie dotyczyć określonej sytuacji, należy je wtedy po
prostu pominąć. W tym rozdziale opowiemy o podłączaniu routera do Internetu
poprzez interfejs eth1.
</p>

</body>
</section>
<section>
<title>ADSL i PPPoE</title>
<body>

<p>
Całe oprogramowanie dla PPPoE, które kiedyś znajdowało się w pakiecie rp-pppoe
<uri link="http://www.roaringpenguin.com/">Roaring Penguin</uri> zostało
zintegrowane do <uri link="http://samba.org/ppp/">standardowego pakietu
PPP</uri>. Jego instalacja w Gentoo odbywa się za pomocą polecenia <c>emerge
ppp</c>. Na początku dokumentu wspominaliśmy o nazwie użytkownika i haśle,
należy je umieścić w pliku <path>/etc/conf.d/net</path>.
</p>

<note>
Aby poniższe instrukcje zadziałały potrzebny będzie pakiet baselayout w wersji
1.12.9 lub nowszy.
</note>

<pre caption="Konfiguracja interfejsu eth1">
<comment>(Zamieniamy 'vla9h924' na odpowiednią nazwę
użytkownika, a 'boogie' na odpowiednie hasło)</comment>

"vla9h924" * "boogie"
# <i>nano /etc/conf.d/net</i>
<comment># Wpis przypisujący połączenie adsl poprzez eth1 do ppp0:</comment>
ifconfig_ppp0=( "ppp" )
link_ppp0=( "eth1" )
plugins_ppp0=( "pppoe" )
pppd_ppp0=(
 "defaultroute"
 "usepeerdns"
  <comment>Inne interesujące ustawienia można znaleźć w pliku /etc/conf.d/net.example</comment>
)
username_ppp0="vla9h924"
password_ppp0="boogie"

# <i>ln -s net.lo /etc/init.d/net.ppp0</i>
# <i>rc-update add net.ppp0 default</i>
# <i>/etc/init.d/net.ppp0 start</i>
</pre>

<warn>
Przy podnoszeniu interfejsu DSL zostanie utworzone ppp0. Jest to dość mylące,
gdyż karta sieciowa tego interfejsu nazywa się eth1. Od tej pory w przykładach
utożsamiamy eth1 z ppp0.
</warn>

<warn>
Niezbędna jest zmiana praw dostępu do pliku <path>/etc/conf.d/net</path> tak,
aby miał do niego dostęp tylko root, ponieważ znajdują się w nim nazwa
użytkownika i hasło.
</warn>

<warn>
Osoby, które migrują ze starego pakietu <c>rp-pppoe</c> oraz osoby, które mają
dziwne problemy związane z połączeniem, powinny przeczytać akapit dotyczący MTU
na końcu tego dokumentu.
</warn>

</body>
</section>
<section>
<title>Modem kablowy i dynamiczne/statyczne IP</title>
<body>

<p>
Posiadacze statycznych adresów IP potrzebują paru informacji więcej niż
użytkownicy adresów przydzielanych dynamicznie. Będą im potrzebne następujące
dane: adres IP, adres bramki i adresy serwerów DNS.
</p>

<pre caption="Konfiguracja interfejsu eth1">
<comment>Użytkownicy posiadający adres IP przydzielany dynamicznie:</comment>
# <i>emerge dhcpcd</i>
# <i>nano /etc/conf.d/net</i>
<comment>Potrzebny będzie wpis:</comment>
ifconfig_eth1=( "dhcp" )

<comment>Użytkownicy posiadający statyczny adres IP:</comment>
# <i>nano /etc/conf.d/net</i>
<comment>Potrzebny będzie wpis:</comment>
config_eth1=( "66.92.78.102 broadcast 66.92.78.255 netmask 255.255.255.0" )
routes_eth1=( "default gw 66.92.78.1" )
# <i>nano /etc/resolv.conf</i>
<comment>Dodajemy jeden serwer na linię:</comment>
nameserver 123.123.123.123

<comment>Polecenia dla wszystkich:</comment>
# <i>ln -s net.lo /etc/init.d/net.eth1</i>
# <i>rc-update add net.eth1 default</i>
# <i>/etc/init.d/net.eth1 start</i>
</pre>

<p>
I na tym kończą się nasze przygotowania.
</p>

</body>
</section>
</chapter>

<chapter>
<title>LAN</title>
<section>
<body>

<p>
Czynności opisane w tym akapicie w porównaniu z tymi z poprzedniej części są
banalnie proste do przeprowadzenia.
</p>

<pre caption="Konfiguracja interfejsu eth0">
# <i>nano /etc/conf.d/net</i>
<comment>Dodajemy tam:</comment>
config_eth0=( "192.168.0.1 broadcast 192.168.0.255 netmask 255.255.255.0" )
# <i>rc-update add net.eth0 default</i>
# <i>/etc/init.d/net.eth0 start</i>
</pre>

</body>
</section>
</chapter>
<chapter>
<title>Usługi w LAN-ie</title>
<section>
<title>Serwer DHCP</title>
<body>

<p>
Byłoby miło gdyby użytkownicy sieci mieli wszystko automatycznie konfigurowane
zaraz po włączeniu komputera bez potrzeby jakiejkolwiek ingerencji z ich strony.
Nie musieliby pamiętać tych wszystkich liczb, ani gubić się w zakręconych
plikach konfiguracyjnych. Życie byłoby wtedy znacznie prostsze i piękniejsze. I
właśnie taki stan powszechnej szczęśliwości może nam zapewnić serwer DHCP.
</p>

<p>
DHCP to protokół umożliwiający dynamiczną i w pełni automatyczną konfigurację
innych komputerów. Wystarczy uruchomić na routerze serwer DHCP (dhcpd), podać
mu wszystkie informacje o potencjalnych klientach (adresy IP, adresy serwerów
DNS, bram sieciowych itp.), a komputer podłączony do serwera zostanie dobrze
skonfigurowany już przy starcie systemu. Więcej informacji o DHCP znajduje się
w <uri link="http://en.wikipedia.org/wiki/DHCP">Wikipedii</uri>.
</p>

<p>
Skorzystamy z pakietu o nazwie dnsmasq, który zawiera w sobie usługi DHCP i
DNS. Teraz skupimy się na usłudze DHCP. Informacje o tym jak uruchomić inny
serwer DHCP znajdują się w akapicie zatytułowanym "Zabawki". Lektura komentarzy
z pliku <path>/etc/dnsmasq.conf</path> może pomóc w majstrowaniu przy serwerze
DHCP, aby lepiej go dostosować do konkretnych potrzeb. Domyślna konfiguracja
powinna zadowolić większość osób.
</p>

<pre caption="Konfiguracja dhcpd">
# <i>emerge dnsmasq</i>
# <i>nano /etc/dnsmasq.conf</i>
<comment>Wystarczy dodanie jednej linii i DHCP będzie działać:</comment>
dhcp-range=192.168.0.100,192.168.0.250,72h
<comment>Udostępniamy dnsmasq tylko dla naszego LAN-u</comment>
interface=eth0
# <i>rc-update add dnsmasq default</i>
# <i>/etc/init.d/dnsmasq start</i>
</pre>

<p>
I tak nasz mały router stał się najprawdziwszym serwerem DHCP! Teraz wystarczy
podłączyć komputery do sieci i sprawdzić, czy wszystko działa jak należy. Jeśli
chodzi o systemy Windows to musimy przejść do właściwości protokołu TCP/IP i
zaznaczyć tam opcję 'Pobierz adresy serwerów DNS automatycznie'. Czasami zmiany
nie są wczytywane automatycznie i natychmiastowo, dlatego konieczne może okazać
się przejście do wiersza poleceń i wpisanie tam poleceń <c>ipconfig /release</c>
oraz <c>ipconfig /renew</c>. To tyle o Windowsie - wracamy do Gentoo.
</p>

</body>
</section>
<section>
<title>Serwer DNS</title>
<body>

<p>
Ludzie nie lubią zapamiętywać liczb, znacznie lepiej przyswajają zwykłe nazwy,
dlatego łatwiej zapamiętać adres ebay.com niż 66.135.192.8. W związku z tym
istnieje zapotrzebowanie na coś takiego jak serwer DNS. Serwery DNS znajdują się
w całym Internecie, a ich zadaniem jest zwracanie ciągu '66.135.192.87' za
każdym razem gdy ktoś będzie chciał odwiedzić stronę ebay.com. Więcej informacji
o DNS można znaleźć w  <uri
link="http://en.wikipedia.org/wiki/DNS">Wikipedii</uri>.
</p>

<p>
W związku z tym, że korzystamy z dnsmasq jako serwera DHCP i zawiera on w sobie
również DNS, nic nie musimy tu ustawiać. Nasz router już zapewnia obie usługi
wszystkim połączonym z nim komputerom.
</p>

<p>
Oczywiście można wybrać inny serwer DNS jeśli ma się taką potrzebę.
</p>

</body>
</section>
<section>
<title>NAT (maskarada IP)</title>
<body>

<p>
W tym momencie użytkownicy naszej sieci mogą komunikować się między sobą oraz
przeszukiwać bazę domen, ale wciąż tak naprawdę nie mogą swobodnie łączyć się z
Internetem. Administrator może być z tego powodu zadowolony (bo ma nieobciążone
łącze), ale użytkownicy na pewno zbyt długo takiego stanu rzeczy nie będą
znosić.
</p>

<p>
W celu umożliwienia użytkownikom prywatnego LAN-u łączenia się z Internetem
musimy skonfigurować NAT. Rozwiązanie to przydaje się zwłaszcza wtedy, gdy mamy
do dyspozycji tylko jeden zewnętrzny adres IP (co jest bardzo częstym
przypadkiem u wielu ISP), a chcemy podłączyć do Internetu komputery w całym
domu. Więcej informacji o NAT można znaleźć w <uri
link="http://en.wikipedia.org/wiki/NAT">Wikipedii</uri>.
</p>

<note>
Zanim zaczniemy, należy się upewnić, że mamy zainstalowany pakiet iptables. W
większości systemów jest instalowany automatycznie, ale może również się
zdarzyć, że go brakuje. Jeśli go nie ma to instalujemy go za pomocą polecenia
<c>emerge iptables</c>.
</note>

<pre caption="Konfiguracja iptables">
<comment>Na początek czyścimy regułki:</comment>
# <i>iptables -F</i>
# <i>iptables -t nat -F</i>

<comment>Domyślne zasady dla pakietów nie pasujących do żadnej regułki</comment>
# <i>iptables -P INPUT ACCEPT</i>
# <i>iptables -P OUTPUT ACCEPT</i>
# <i>iptables -P FORWARD DROP</i>

<comment>Przykłady można przekleić</comment>
# <i>export LAN=eth0</i>
# <i>export WAN=eth1</i>

<comment>Potem blokujemy usługi tak, aby były dostępne tylko dla sieci LAN</comment>

# <i>iptables -I INPUT 1 -i ${LAN} -j ACCEPT</i>
# <i>iptables -I INPUT 1 -i lo -j ACCEPT</i>
# <i>iptables -A INPUT -p UDP --dport bootps -i ! ${LAN} -j REJECT</i>
# <i>iptables -A INPUT -p UDP --dport domain -i ! ${LAN} -j REJECT</i>

<comment>(Opcjonalnie) Pozwalamy na dostęp do naszego serwera SSH z Internetu</comment>
# <i>iptables -A INPUT -p TCP --dport ssh -i ${WAN} -j ACCEPT</i>

<comment>Upuszczamy pakiety TCP/UDP dla uprzywilejowanych portów</comment>
# <i>iptables -A INPUT -p TCP -i ! ${LAN} -d 0/0 --dport 0:1023 -j DROP</i>
# <i>iptables -A INPUT -p UDP -i ! ${LAN} -d 0/0 --dport 0:1023 -j DROP</i>

<comment>Ostatecznie dodajemy regułki dla NAT</comment>
# <i>iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP</i>
# <i>iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT</i>
# <i>iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT</i>
# <i>iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE</i>

<comment>Informujemy jądro o chęci przekazywania IP</comment>
# <i>echo 1 > /proc/sys/net/ipv4/ip_forward</i>
# <i>for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done</i>

<comment>Poniższe polecenia sprawią, że przy każdym uruchomieniu routera
nie będziemy musieli wpisywać ręcznie wszystkich regułek</comment>
# <i>/etc/init.d/iptables save</i>
# <i>rc-update add iptables default</i>
# <i>nano /etc/sysctl.conf</i>
<comment>Dodajemy przez odkomentowanie następujące linijki:</comment>
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 1
<comment>Osoby bez stałego dostępu do Internetu zapewną zechcą włączyć tę opcję:</comment>
net.ipv4.ip_dynaddr = 1
</pre>

<p>
Po wykonaniu powyższych poleceń komputery z naszej małej sieci powinny mieć
dostęp do Internetu równie swobodny, jak gdyby były podłączone do niego
bezpośrednio.
</p>

<p>
Opcja ip_dynaddr jest potrzebna do wyboru systemu dial on demand, gdy provider
nie zapewnia stałego adresu. Pozwala to na obejście problemu gdy połączenie
jest inicjowane przed pełnym skonfigurowaniem interfejsu. Pozwala to na
ułatwienie życia osobom korzystającym z sieci za pomocą routera.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Zabawki (coś na długie deszczowe dni)</title>
<section>
<title>Wstęp</title>
<body>

<p>
Wierzycie czy nie - to już wszystko. Teraz zajmiemy się dodatkowymi gadżetami,
które na pewno zainteresują wiele osób. Wszystkie są całkowicie opcjonalne.
</p>

</body>
</section>
<section>
<title>Przekazywanie portów.</title>
<body>

<p>
Czasem zachodzi potrzeba uruchomienia jakichś usług na komputerze znajdującym
się za routerem lub też umożliwienie zdalnego do niego połączenia. Może chodzić
np. o uruchomienie na jednym lub kilku komputerach za NAT-em serwera FTP, HTTP,
SSH lub VNC. Jedynym ograniczeniem wtedy jest to, że można mieć tylko jedną taką
usługę na każdym porcie naszego routera. Na przykład nie ma możliwości
przekazywania połączeń na trzy serwery FTP za routerem i łączenia się przez nie
poprzez port 21. Jeśli jednak to konieczne, zawsze można uruchomić pozostałe na
innych portach - np. 123 czy 567.
</p>

<p>
Każda regułka dla przekazywania portów ma postać <c>iptables -t nat -A
PREROUTING [-p protokół] --dport [zewnętrzny port na routerze] -i ${WAN} -j DNAT
-to [ip/port na które chcemy przekazywać]</c>. Iptables nie akceptuje nazw
stacji roboczych, nie trzeba też podawać portu docelowego na wewnętrznym
komputerze.  Zawsze jest to ten sam port co na komputerze przekierowującym.
Więcej informacji na ten temat znajduje się w man iptables.
</p>

<pre caption="Przekazywanie portów">
<comment>Przykłady można przekleić</comment>
# <i>export LAN=eth0</i>
# <i>export WAN=eth1</i>

<comment>Przekazywanie portu 2 dla ssh na wewnętrznej stacji roboczej</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 2 -i ${WAN} -j DNAT --to 192.168.0.2:22</i>

<comment>Przekazywanie FTP na wewnętrzną stację roboczą</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 21 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Przekazywanie HTTP na wewnętrzną stację roboczą</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 80 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Przekazywanie VNC na wewnętrzną stację roboczą</comment>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 5900 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 5901 -i ${WAN} -j DNAT --to 192.168.0.3:5900</i>
<comment>Aby mieć VNC na 192.168.0.3, należy po prostu dodać ':1' do nazwy routera</comment>

<comment>Przekazywanie Samba na wewnętrzną stację roboczą (dodatkowe porty potrzebne są do obsługi systemu Windows)</comment>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 135 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 139 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p tcp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p udp --dport 137:138 -i ${WAN} -j DNAT --to 192.168.0.2</i>
# <i>iptables -t nat -I PREROUTING -p udp --dport 445 -i ${WAN} -j DNAT --to 192.168.0.2</i>

<comment>Przekazywanie Bittorrent</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 6881:6889 -i ${WAN} -j DNAT --to 192.168.0.2</i>

<comment>Przekazywanie eDonkey/eMule</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 4662 -i ${WAN} -j DNAT --to 192.168.0.55</i>

<comment>Wsparcie dla Warp Pipe z Game Cube</comment>
# <i>iptables -t nat -A PREROUTING -p udp --dport 4000 -i ${WAN} -j DNAT --to 192.168.0.56</i>

<comment>Interaktywna pomoc techniczna Playstation2</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11</i>
# <i>iptables -t nat -A PREROUTING -p udp --dport 10070:10080 -i ${WAN} -j DNAT --to 192.168.0.11</i>

<comment>Xbox Live</comment>
# <i>iptables -t nat -A PREROUTING -p tcp --dport 3074 -i ${WAN} -j
# DNAT --to 192.168.0.69</i>
# <i>iptables -t nat -A PREROUTING -p udp --dport 3074 -i
# ${WAN} -j DNAT --to 192.168.0.69</i>
# <i>iptables -t nat -A PREROUTING -p udp --dport 88
# -i ${WAN} -j DNAT --to 192.168.0.69</i>
</pre>

<note>
Inne ciekawe przykłady przekazywania portów można przysyłać bezpośrednio do
<mail link="vapier@gentoo.org">mnie</mail>, postaram się je zamieścić na tej
stronie.
</note>

</body>
</section>
<section>
<title>Identd (dla IRC)</title>
<body>

<p>
Usługa ident jest bardzo silnie wykorzystywana przez IRC. Teraz, gdy użytkownicy
sieci znaleźli się za routerem należy zapewnić identyfikację zarówno im jak i
naszemu routerowi. Jednym z serwerów stworzonych w tym celu jest <c>midentd</c>.
</p>

<pre caption="Konfiguracja ident">
# <i>emerge midentd</i>
# <i>rc-update add midentd default</i>
# <i>/etc/init.d/midentd start</i>
</pre>

<p>
W Portage znajduje się jeszcze kilka innych serwerów tego typu. Zależnie od
potrzeb warto zwrócić uwagę na <c>oidentd</c> lub <c>fakeidentd</c>.
</p>

</body>
</section>

<!--
<section>
<title>Kształtowanie ruchu.</title>
<body>
<p>
Ta sekcja jest próbą zastosowania <uri
link="http://www.tldp.org/HOWTO/ADSL-Bandwidth-Management-HOWTO/">Poradnika
zarządzania przepustowością ADSL</uri> w sposób prosty i zgodny z systemem
Gentoo.
</p>

<p>
Będziemy tutaj konfigurować coś co ludzie nazywają "Packet Shaper",
<uri link="http://en.wikipedia.org/wiki/Traffic_shaping">"Traffic
Shaping"</uri>, lub <uri link="http://en.wikipedia.org/wiki/QoS">"Quality of
Service"</uri>.  Chcemy po prostu, skonfigurować na naszym routerze regułki,
które spowolniłyby pewne rodzaje ruchu (takie jak wysyłanie dużych e-maili lub
korzystanie z sieci P2P) jednocześnie nie ograniczając innego ruchu (takiego
jak przeglądanie stron www lub korzystanie z gier sieciowych). 30 sekund
różnicy w grze sieciowej jest nieporównywalnie gorsze od 30 sekund w ściąganiu
jakiegoś dużego pliku :).
</p>

<p>
Pierwszą rzeczą do zrobienia jest sprawdzenie czy nasze jądro ma wbudowane
wszystkie funkcje potrzebne do naszego planu. Wróć do rozdziału <uri
link="#doc_chap2">Konfiguracja jądra</uri> po więcej informacji. Następnie
będziemy potrzebowali wykonać <c>emerge iptables iputils</c> tak, abyśmy mieli
dostęp do następujących komend <c>iptables</c>, <c>ip</c>, oraz <c>tc</c>.
</p>

<p>
Zanim przeskoczymy do komend, zajmijmy się nieco teorią. Metodą dzięki której
ten system działa jest klasyfikacja całego ruchu sieciowego, a następnie
ustalenie odpowiednich priorytetów. Będziemy używać iptables do klasyfikacji
ruchu, iputils do definiowania różnych klas, oraz jądra do dostosowania
prędkości.  Pamiętaj tylko, że możesz kontrolować ruch wychodzący w bardzo
dokładnym zakresie (z sieci LAN do WAN), jednakże możliwości kontroli ruchu
przychodzącego (z sieci WAN do LAN) są niejako ograniczone. Pamiętaj, że
poniższe przykłady to tylko wierzchołek góry lodowej; jeżeli chciałbyś więcej
musisz sam zgłębić temat. W tym przykładzie użyjemy <uri
link="http://luxik.cdi.cz/~devik/qos/htb/">Hierarchicznego wiadra żetonów
(HTB)</uri> jako algorytmu szeregującego. Dalej jesteś ze mną? Świetnie, więc
bierzemy się za kształtowanie ruchu :)
</p>

<pre caption="Konfiguracja">
DEV=eth1 <comment>Karta sieciowa podłączona do sieci WAN</comment>
RATE_OUT=100 <comment>Dostępna szerokość pasma wychodzącego (w kilobitach [kb])</comment>
RATE_IN=1400 <comment>Dostępna szerokość pasma przychodzącego (w kb)</comment>

<comment>Tutaj ustawiamy system priorytetów. 45 jest tutaj domyślną
klasą.</comment>
ip link set dev ${DEV} qlen 30
tc qdisc add dev ${DEV} root handle 1: htb default 45
tc class add dev ${DEV} parent 1: classid 1:1 htb rate ${RATE_OUT}kbit
</pre>

<p>
Właśnie zainicjowaliśmy system, który będzie używany do ustalania priorytetów
naszego ruchu sieciowego. Stworzyliśmy naszą kolejkę, powiedzieliśmy jej aby
używała algorytmu HTB, oraz ustaliliśmy domyślną klasę na 45.  Wartość
'default' wybieramy całkowicie arbitralnie. Najważniejszą rzeczą jest jak klasy
są ze są ze sobą powiązane; więc klasa '10' będzie miała pierwszeństwo nad
klasą '45'. Zadeklarujmy teraz inne klasy.
</p>

<pre caption="Deklaracje klas">
tc class add dev $DEV parent 1:1 classid 1:10 htb rate $rkbit ceil $tkbit prio $p
tc qdisc add dev $DEV parent 1:10 handle 10: sfq
</pre>
</body>
</section>
-->

<section>
<title>Serwer czasu</title>
<body>

<p>
Prawidłowe ustawienie czasu na serwerze również może dać nam wiele korzyści.
Jednym ze sposobów osiągnięcia tego może być sieciowy protokół czasu (NTP), z
którego można zacząć korzystać po zainstalowaniu pakietu ntp, zawierającego
zarówno serwer jak i program kliencki.
</p>

<p>
Większość ludzi uruchamia na swoich komputerach tylko program kliencki ntp.
Oczywiście, im więcej klientów na świecie, tym większe obciążenie serwery ntp
muszą wytrzymać. W warunkach domowych możemy trochę odciążyć publiczne serwery,
samodzielnie dostarczając aktualny czas do wszystkich naszych komputerów.
Dodatkową korzyścią może być również to, że aktualizacje czasu będą w tym
przypadku znacznie szybsze. Wszystko co musimy zrobić to uruchomić na naszym
routerze serwer czasu, który będzie się synchronizował z publicznymi serwerami w
Internecie, jednocześnie dostarczając poprawny czas do reszty naszych
komputerów. Pierwsze polecenie jakie należy wykonać to <c>emerge ntp</c> na
routerze.
</p>

<pre caption="Konfigurowanie serwera NTP">
# <i>nano /etc/conf.d/ntp-client</i>
<comment>Domyślne ustawienia powinny być dobre, ale można również dostosować je do indywidualnych potrzeb</comment>
# <i>rc-update add ntp-client default</i>

# <i>nano /etc/ntp.conf</i>
<comment>Dodajemy następujące linie:</comment>
restrict default ignore
restrict 192.168.0.0 mask 255.255.255.0 notrust nomodify notrap
To pozwoli na korzystanie z Twojego serwera ntp tylko klientom, którzy posiadają
adres IP z zakresu 192.168.0.xxx
# <i>nano /etc/conf.d/ntpd</i>
<comment>Domyślne ustawienia powinny być dobre, ale można również dostosować je do indywidualnych potrzeb:</comment>
# <i>rc-update add ntpd default</i>

# <i>/etc/init.d/ntp-client start</i>
# <i>/etc/init.d/ntpd start</i>
</pre>

<note>
Przy konfiguracji serwera należy się upewnić, że jest otwarta możliwość
komunikacji do i z portu ntp (123/udp). Klient wymaga jedynie możliwości
łączenia się z portu 123 udp.
</note>

<p>
Następnie na wszystkich komputerach należących do sieci należy wykonać polecenie
<c>emerge ntp</c>.  Ich konfiguracja będzie znacznie prostsza.
</p>

<pre caption="Konfiguracja klienta NTP">
# <i>nano /etc/conf.d/ntp-client</i>
<comment>Należy dokonać zmiany NTPCLIENT_OPTS
z 'pool.ntp.org' na'192.168.0.1'</comment>
# <i>rc-update add ntp-client default</i>
# <i>/etc/init.d/ntp-client start</i>
</pre>

</body>
</section>
<section>
<title>Serwer Rsync</title>
<body>

<p>
Osoby posiadające wiele komputerów z Gentoo w obrębie jednego LAN-u z pewnością
wolą pobrać jeden obraz drzewa Portage z Internetu i później udostępnić go dla
innych komputerów niż uruchamiać polecenie <c>emerge sync</c> osobno na każdym z
nich. Pozwala to zmniejszyć zarówno obciążenie serwerów rsync Gentoo jak i
lokalnych komputerów. Konfiguracja jest stosunkowo prosta.
</p>

<note>
Więcej szczegółów znajduje się w tekście zatytułowanym <uri
link="/doc/pl/rsync.xml#local">Zasady pracy serwerów rsync</uri>.
</note>

<p>
W związku z tym, że każdy komputer z Gentoo musi mieć zainstalowany program
rsync, nie ma potrzeby go teraz instalować. Wystarczy wyedytować domyślny plik
konfiguracyjny <path>/etc/rsyncd.conf</path> odkomentowując w nim część
<c>[gentoo-portage]</c> i dodać opcję <c>address</c>. Pozostałe domyślne
ustawienia nie wymagają poprawek.
</p>

<pre caption="Konfiguracja serwera Rsync">
   pid file = /var/run/rsyncd.pid
   use chroot = yes
   read only = yes
   address = 192.168.0.1

   [gentoo-portage]
           path = /mnt/space/portage
           comment = Gentoo Linux Portage tree
           exclude = /distfiles /packages
</pre>

<p>
Następnie należy uruchomić odpowiednią usługę (przypominamy, ustawienia domyślne
są w porządku).
</p>

<pre caption="Uruchamianie serwera rsync">
# <i>/etc/init.d/rsyncd start</i>
# <i>rc-update add rsyncd default</i>
</pre>

<p>
Na koniec konfigurujemy pozostałe komputery tak, aby korzystały z naszego
routera jako domyślnego serwera Rsync.
</p>

<pre caption="Ustawienie serwera Rsync w pliku make.conf na pozostałych komputerach">
SYNC="rsync://192.168.0.1/gentoo-portage"
</pre>

</body>
</section>
<section>
<title>Serwer pocztowy</title>
<body>

<p>
Czasami miło jest uruchomić na routerze własny prosty serwer poczty (SMTP). Ja
go uruchomiłem, aby użytkownicy widzieli swoje maile jako wysłane natychmiastowo
i aby cała praca nad ponownym przesyłaniem czy routowaniem została przeniesiona
na serwer pocztowy. Warto zwrócić uwagę, że niektórzy usługodawcy Internetowi
nie pozwalają na przekazywanie poczty dla kont, które nie są częścią ich sieci
(np. Verizon). Wartościową opcją jest możliwość kontrolowania wielkości
przesyłanych załączników tak, aby zbyt duże pliki nie blokowały łącza.
</p>

<pre caption="Konfiguracja SMTP">
# <i>emerge netqmail</i>
<comment>Wynik polecenia `hostname` musi być poprawny</comment>
# <i>emerge --config netqmail</i>
# <i>iptables -I INPUT -p tcp --dport smtp -i ! ${LAN} -j REJECT</i>
# <i>ln -s /var/qmail/supervise/qmail-send /service/qmail-send</i>
# <i>ln -s /var/qmail/supervise/qmail-smtpd /service/qmail-smtpd</i>
# <i>cd /etc/tcprules.d</i>
# <i>nano tcp.qmail-smtp</i>
<!--
# <i>cd /etc</i>
# <i>nano tcp.smtp</i>
-->
<comment>Dodajemy następujący wpis do sekcji allow:</comment>
192.168.0.:allow,RELAYCLIENT=""
<!--
# <i>tcprules tcp.qmail-qmtp.cdb rules.tmp &lt; tcp.qmail-smtp</i>
# <i>tcprules tcp.smtp.cdb rules.tmp &lt; tcp.smtp</i>
-->
# <i>make</i>
# <i>rc-update add svscan default</i>
# <i>/etc/init.d/svscan start</i>
</pre>

<p>
Osobiście jestem wielkim fanem programu qmail, ale jego wybór nie jest tu
obowiązkowy i można swobodnie wybrać inny MTA. Podczas konfiguracji poczty
należy ustawić jako serwer adres 192.168.1.0 i wszystko powinno działać
prawidłowo. Więcej informacji na ten temat znajduje się na stronie domowej
projektu <uri link="http://netqmail.org/">netqmail</uri>.
</p>

</body>
</section>

<!--
<section>
<title>Skanowanie antywirusowe poczty.</title>
<body>
<p>
Jeżeli masz ochotę udostępnić skanowanie antywirusowe poczty dla swoich
użytkowników, ale nie chcesz instalować skanera na każdej pojedynczej maszynie,
wtedy <c>pop3vscan</c> może być rozwiązaniem którego potrzebujesz; przeźroczysty
skaner protokołu pocztowego.
</p>
<pre caption="Konfiguracja pop3vscan">
TODO
</pre>

</body>
</section>
-->

<section>
<title>Kompletny serwer DHCP</title>
<body>

<p>
Wcześniej skorzystaliśmy z pakietu dnsmasq jako źródła usługi DHCP w naszej
sieci. Dla ludzi, którzy opiekują się małymi LAN-ami jest to wystarczające
rozwiązanie. Niektórzy jednak mogą być bardziej wymagający i zapragną bardziej
wyszukanych możliwości. Takim osobom polecam serwer DHCP z krwi i kości,
stworzony przez <uri link="http://www.isc.org/products/DHCP">ISC</uri>.
</p>

<pre caption="Konfiguracja dhcpd">
# <i>emerge dhcp</i>
# <i>nano /etc/dhcp/dhcpd.conf</i>
<comment>(Przykładowy plik konfiguracyjny)</comment>
authoritative;
ddns-update-style interim;
subnet 192.168.0.0 netmask 255.255.255.0 {
       range 192.168.0.100 192.168.0.250;
       default-lease-time 259200;
       max-lease-time 518400;
       option subnet-mask 255.255.255.0;
       option broadcast-address 192.168.0.255;
       option routers 192.168.0.1;
       option domain-name-servers 192.168.0.1;
}
# <i>nano /etc/conf.d/dhcpd</i>
<comment>(Ustawiamy IFACE="eth0")</comment>
# <i>rc-update add dhcpd default</i>
# <i>/etc/init.d/dhcpd start</i>
</pre>

<p>
Jest to minimalna konfiguracja spełniająca te same funkcje co przedstawiony
wyżej dnsmasq. W związku z tym, że zmieniliśmy pakiet, który będzie spełniał
funkcje serwera DHCP, musimy wyłączyć taką możliwość dla dnsmasq. W tym celu
wystarczy zakomentować wpis <c>dhcp-range</c> w pliku
<path>/etc/dnsmasq.conf</path> i ponownie uruchomić usługę.
</p>

</body>
</section>
<section>
<title>Podłączanie drugiego LAN-u (lub nawet kilku))</title>
<body>

<p>
Czasem pojawia się potrzeba podłączenia do routera drugiej sieci LAN. Przyczyny
tego mogą być różne, a sama procedura jest dość prosta. W poniższym przykładzie
zakładamy, że LAN zostanie podłączony za pomocą trzeciej karty sieciowej,
<c>eth2</c>.
</p>

<p>
Przede wszystkim należy skonfigurować interfejs. Informacje na ten temat
znajdują się w <uri link="#doc_chap4_pre1">listingu 4.1</uri>, wystarczy
zastąpić tam <c>eth0</c> przez <c>eth2</c>, a zamiast <c>192.168.0</c> wpisać
<c>192.168.1</c>.
</p>

<p>
Następnie należy dokonfigurować dnsmasq, dodając do niego informacje o nowym
interfejsie. W tym celu edytujemy plik <path>/etc/conf.d/dnsmasq</path> po raz
kolejny i dodajemy linię <c>-i eth2</c> do zmiennej DNSMASQ_OPTS - możliwe jest
użycie kilku parametrów <c>-i</c>. Później edytujemy
<path>/etc/dnsmasq.conf</path> i dodajemy kolejną linię z zakresem adresów IP,
podobną do tej z <uri link="#doc_chap5_pre1">listingu 5.1</uri>. Posiadanie
kilku linii tego typu nie stanowi żadnego problemu.
</p>

<p>
Na koniec przeglądamy <uri link="#doc_chap5_pre2">listing 5.2</uri> i
duplikujemy wpisy z <c>-i ${LAN}</c>. Można również zastosować do tego celu
drugą zmienną, np. LAN2, żeby trochę uprościć konfigurację.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Problemy</title>
<section>
<title>Przydatne narzędzia</title>
<body>

<p>
W przypadku problemów z komunikacją pomiędzy komputerami warto skorzystać z
następujących, znajdujących się w kategorii <c>net-analyzer</c> drzewa Portage,
narzędzi:
</p>

<table>
  <tr>
    <th>Program</th>
    <th>Opis</th>
  </tr>
  <tr>
    <ti>wireshark</ti>
    <ti>Narzędzie z interfejsem graficznym pozwalające na podglądanie danych
    przesyłanych w sieci w oparciu o zestaw filtrów.</ti>
  </tr>
  <tr>
    <ti>tcpdump</ti>
    <ti>Konsolowy program do podglądania ruchu pakietów, również oparty o zestaw
    filtrów</ti>
  </tr>
  <tr>
    <ti>iptraf</ti>
    <ti>Monitor sieci LAN oparty o biblioteki graficzne ncurses</ti>
  </tr>
  <tr>
    <ti>ettercap</ti>
    <ti>Program do kontroli i monitorowania sieci, również oparty na
    ncurses</ti>
  </tr>
</table>

</body>
</section>
<section>
<title>DHCP się nie uruchamia</title>
<body>

<p>
Pierwsze uruchomienie skryptu startowego init.d dla dhcp może się nie udać, w
dodatku nie informując co poszło nie tak.
</p>

<pre caption="Przykład błędu DHCP">
# <i>/etc/init.d/dhcp start</i>
 * Setting ownership on dhcp.leases ...          [ ok ]
 * Starting dhcpd ...                            [ !! ]
</pre>

<p>
Aby rozwiązać ten problem, wystarczy wiedzieć gdzie dhcpd wysyła komunikaty o
błędach. Wystarczy przejść do <path>/var/log</path> i poczytać logi. W związku
z tym, że nazwa pliku z logiem jest różna w zależności od programu logującego
działającego na komputerze, radzimy uruchomić <c>grep -Rl dhcpd /var/log</c>,
aby odnaleźć właściwą lokację. Błąd ten zwykle jest spowodowany literówką w
pliku konfiguracyjnym. Można uruchomić <c>dhcpd -d -f</c> (debug, praca w tle)
i sprawdzić na czym dokładnie usługa się psuje.
</p>

</body>
</section>
<section>
<title>Niewłaściwy rozmiar MTU</title>
<body>

<p>
W przypadku dziwnych błędów (np. gdy tylko niektóre strony się wczytują) warto
sprawdzić czy nie wystąpił problem z wielkością MTU. Szybki sposób na
sprawdzenie tego to wykonanie następującego polecenia:
</p>

<pre caption="Rozwiązywanie problemów z MTU">
# <i>iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS
--clamp-mss-to-pmtu</i>
</pre>

<p>
Będzie to miało wpływ tylko na nowe połączenia, dlatego należy odświeżyć strony,
które wcześniej się nie ładowały w celu przetestowania nowych ustawień. W
naprawie może pomóc informacja, że standardowa wartość MTU dla połączenia do 100
Mbit to <c>1492</c> Więcej informacji znajduje się w 15 rozdziale tekstu <uri
link="http://lartc.org/howto/">Linux Advanced Routing &amp; Traffic Control
HOWTO</uri>.
</p>

</body>
</section>
<section>
<title>Nie daje się połączyć dwóch komputerów bezpośrednio</title>
<body>

<p>
Jeśli komputery mają być połączone bezpośrednio, czyli bez udziału huba lub
switcha, zwykły kabel sieciowy nie zadziała jeśli nie ma się specjalnego
urządzenia (Auto MDI/MDX), które samo wykrywa rodzaj kabla. Konieczne wtedy
będzie skorzystanie ze specjalnego rodzaju skrętki nazywanej <e>skrosowaną</e>.
Więcej informacji na jej temat znajduje się w <uri
link="http://en.wikipedia.org/wiki/Ethernet_crossover_cable">Wikipedii</uri>.
</p>

</body>
</section>
</chapter>
<chapter>
<title>Podsumowanie</title>
<section>
<body>

<p>
Na koniec warto jeszcze wspomnieć, że wszystkie problemy z przeprowadzaniem
czynności opisanych w tym tekście można zgłaszać bezpośrednio <mail
link="vapier@gentoo.org">do mnie</mail> lub do naszego systemu raportowania
błędów, <uri link="http://bugs.gentoo.org/">Gentoo Bugzilla</uri>. Proszę
również o wszelkie dodatkowe informacje i sugestie dotyczące tego tekstu.
</p>

</body>
</section>
</chapter>
</guide>
