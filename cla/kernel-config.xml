<?xml version="1.0" encoding="UTF-8"?>
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/kernel-config.xml,v 1.2 2006/07/18 09:53:24 rane Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/pl/kernel-config.xml" lang="pl">
<title>Konfiguracja jądra Linux</title>

<author title="Autor">
  <mail link="dsd@gentoo.org">Daniel Drake</mail>
</author>
<author title="Redaktor">
  <mail link="curtis119@gentoo.org">Curtis Napier</mail>
</author>
<author title="Redaktor">
  <mail link="jdr@xemoka.net">Justin Robinson</mail>
</author>
<author title="Redaktor i tłumacz">
  <mail link="rane@gentoo.org">Łukasz Damentko</mail>
</author>
<author title="Redaktor">
  <mail link="smithj@gentoo.org">Jonathan Smith</mail>
</author>

<abstract>
Ten dokument opisuje główne założenia ręcznej konfiguracji jądra oraz
szczegółowo omawia najczęstsze związane z nią problemy.
</abstract>

<!-- The content of this document is licensed under the CC-BY-SA license -->
<!-- See http://creativecommons.org/licenses/by-sa/2.5 -->
<license/>

<version>1.1</version>
<date>2007-07-27</date>

<chapter>
<title>Wprowadzenie</title>
<section>
<body>

<p>
W Gentoo dostępne są dwie metody konfiguracji jądra. <e>Automatyczna</e>
(genkernel) i <e>ręczna</e>. Automatyczna metoda może wydawać się nieco
<e>łatwiejsza</e>, ale większość użytkowników i tak wybiera ręczną konfigurację
jądra. Powody takiej decyzji mogą być różne, zwykle wymienia się większą
elastyczność ręcznej konfiguracji, mniejszy rozmiar jądra, krótszy czas
kompilacji, możliwość nauki i nadmiar wolnego czasu.
</p>

<p>
W tym tekście nie ma instrukcji dotyczących metody automatycznej. Jeśli ktoś
woli użyć genkernela do kompilacji i instalacji jądra, powinien skorzystać z
opisu <uri link="/doc/pl/genkernel.xml">Konfiguracji jądra genkernel</uri>.
</p>

<p>
Nie opiszemy tu całego procesu konfiguracji od początku do końca. W wielkim
stopniu zależy on bowiem od samodzielności użytkownika i jego poziomu wiedzy o
używanym sprzęcie. Zamiast tego opiszemy tu najczęściej pojawiające się
problemy.
</p>

<p>
Dokument ten dotyczy instalacji nowszych jąder dla najbardziej popularnych
architektur. Niektóre jego fragmenty mogą nie dotyczyć starszych jąder i
egzotycznego sprzętu. Większość treści powinna jednak pozostać wspólna.
</p>

<p>
Zakładamy, że użytkownik posiada źródła jądra Linux na twardym dysku (w
katalogu <c>/usr/src</c>), że potrafi dostać się do programu konfigurującego
jądro za pomocą polecenia <c>menuconfig</c> i że potrafi się po nim poruszać.
Ten dokument nie jest skierowany do osób, które nie spełniają tych warunków.
</p>

<ul>
  <li>
    <uri link="/doc/pl/gentoo-kernel.xml">Omówienie źródeł jądra dostępnych w
    Gentoo</uri> to tekst opisujący wszystkie źródła jądra dostępne w drzewie
    Portage
  </li>
  <li>
    <uri link="/doc/pl/kernel-upgrade.xml">Aktualizacja jądra w systemie
    Gentoo</uri> wyjaśnia jak zbudować i zainstalować nowe jądro
  </li>
  <li>
    <uri link="/doc/pl/handbook/index.xml">Podręcznik Gentoo</uri> zawiera
    podstawowe informacje na temat konfiguracji jądra.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Opis konfiguracji</title>
<section>
<title>Podstawy</title>
<body>

<p>
Cały proces jest stosunkowo prosty. Użytkownikowi przedstawiana jest pewna
ilość opcji pogrupowanych w kilkustopniowych menu i musi on wybrać te z nich,
które dotyczą jego sprzętu.
</p>

<p>
Jądro posiada <e>domyślną konfigurację</e>, która jest ustawiana przy pierwszym
uruchomieniu menuconfig na konkretnym zestawie źródeł. Domyślne opcje są
skonfigurowane w bardzo dobry sposób tak, aby były odpowiednie dla większości
użytkowników zmuszając ich jedynie do drobnych poprawek konfiguracji. Nie
należy wyłączać żadnych domyślnych opcji jeśli nie wie się dokładnie do czego
one służą i jakie są konsekwencje ich wyłączenia.
</p>

<p>
Jeśli jest to pierwsza konfiguracja jądra w życiu, nie należy zmieniać za dużo,
a raczej pozostać przy jak największej ilości domyślnych opcji. Należy również
być bardzo uważnym, niektóre części konfiguracji są kluczowe dla prawidłowego
uruchomienia się systemu.
</p>

</body>
</section>
<section>
<title>Wbudowane sterowniki czy moduły</title>
<body>

<p>
Większość opcji można oznaczyć na <e>trzy sposoby</e>. Jako takie, które
wcale nie zostaną zbudowane, takie, które będą wbudowane w jądro na stałe (Y)
i takie, które zostaną zbudowane jako moduły (M). Moduły znajdują się w osobnym
katalogu na twardym dysku, w odróżnieniu od wbudowanych części jądra, które
znajdują się wewnątrz jego obrazu.
</p>

<p>
Pomiędzy sterownikami wbudowanymi i modularnymi istnieje jedna zasadnicza
różnica. Poza kilkoma wyjątkami, jądro nie będzie automatycznie ładowało
sterowników zbudowanych jako moduły, niezależnie od tego czy są potrzebne czy
nie. Wprawdzie inne składniki systemu mogą zażądać załadowania konkretnego
modułu, wciąż jednak zalecamy wbudowywanie wszystkich niezbędnych sterowników
bezpośrednio w jądro. Dzięki temu obsługa sprzętu będzie dostępna zawsze,
niezależnie od okoliczności.
</p>

<p>
Niektóre opcje po prostu trzeba wbudować na stałe w jądro. Przykładem takiej
opcji jest obsługa używanego na partycjach systemu plików. Jeśli korzysta się z
<c>ext2</c> i zbuduje się jego obsługę jako moduł, system się po prostu nie
uruchomi, ponieważ nie będzie w stanie odczytać modułu ext2 z partycji, której
obsługi nie posiada.
</p>

</body>
</section>
<section>
<title>Obsługa sprzętu</title>
<body>

<p>
Poza wykryciem <e>architektury systemu</e>, program konfiguracyjny nie
przeprowadza żadnych testów sprawdzających jaki sprzęt jest zainstalowany w
komputerze. Istnieją wprawdzie domyślne opcje konfiguracyjne dla najczęściej
używanego sprzętu, ale zwykle nie mają one zastosowania w konkretnym przypadku
i konieczne jest ręczne wybranie obsługi używanego sprzętu.
</p>

<p>
Wymaga to posiadania pewnej wiedzy na temat używanego komputera, znajomości
sprzętu jaki jest w nim zainstalowany. Podstawową sprawą jest informacja o tym,
jaki <e>chipset</e> ma płyta główna zainstalowana w komputerze, nie jej
konkretna nazwa.
</p>

<p>
Na szczęście istnieją programy, które umożliwiają wykrycie całego
zainstalowanego w komputerze sprzętu. Program <c>lspci</c> (część pakietu
<c>sys-apps/pciutils</c>) pozwala zidentyfikować wszystkie karty rozszerzeń
podłączone do złącz PCI oraz sprzęt wbudowany w płytę główną, a program
<c>lsusb</c> (z pakietu <c>sys-apps/usbutils</c>) pozwala na identyfikację
wszystkich urządzeń podłączonych przez porty USB.
</p>

<p>
Sytuacja jest w pewien sposób skomplikowana przez różne stopnie standaryzacji
sprzętu. Jeśli dany komputer nie odbiega za bardzo od domyślnych ustawień,
sprzęt po prostu będzie działał. Dyski IDE, czy klawiatura i myszka na PS/2 nie
są problemem. Problem pojawia się gdy standardy niemal nie istnieją, tak jak
na przykład dla kart sieciowych. W takim wypadku trzeba zidentyfikować
konkretny model karty sieciowej i wybrać go z długiej listy podobnych urządzeń
w odpowiednim menu programu konfiguracyjnego.
</p>

<p>
Kilka opcji domyślnych zapewnia tylko podstawową obsługę sprzętu, nie
pozwalając na wykorzystanie jego pełnych możliwości. Dotyczy to na przykład
obsługi chipsetu IDE, której domyślne ustawienia sprawią, że twarde dyski IDE
będą wprawdzie działać, ale ich praca będzie <e>bardzo wolna</e>.
</p>

</body>
</section>
<section>
<title>Opcje jądra</title>
<body>

<p>
Poza obsługą sprzętu, jądro posiada też szereg opcji dotyczących współpracy z
różnymi typami oprogramowania. Jednym z przykładów jest obsługa systemów
plików, którą trzeba wybrać, aby możliwa była praca na założonych partycjach
głównych i dodatkowych (takich jak VFAT czy karty pamięci USB).
</p>

<p>
Innym przykładem takich możliwości są zaawansowane opcje sieciowe. Aby móc
skorzystać z zapór ogniowych czy routingu, konieczne jest zaznaczenie
odpowiednich opcji w konfiguracji jądra.
</p>

</body>
</section>
<section>
<title>Gotowi?</title>
<body>

<p>
Po lekturze tego krótkiego omówienia podstawowych problemów związanych z
konfiguracją jądra, należy przystąpić do identyfikacji używanego sprzętu oraz
odszukiwania i włączania jego obsługi w programie konfiguracyjnym jądra.
</p>

<p>
Pozostała część tego tekstu to próba rozwiązania najczęściej pojawiających się
problemów oraz wyjaśnienienia kwestii, które najczęściej powodują dezorientację
użytkowników. Powodzenia!
</p>

</body>
</section>
</chapter>

<chapter>
<title>Najczęstsze problemy</title>
<section>
<title>Dyski SATA jako SCSI</title>
<body>

<p>
Większość nowych komputerów posiada twarde dyski i napędy CD/DVD oparte na <uri
link="http://en.wikipedia.org/wiki/SATA">Serial ATA</uri> częściej niż na
starszym <uri link="http://en.wikipedia.org/wiki/Parallel_ATA">IDE</uri>.
</p>

<p>
Obsługa SATA w Linuksie jest implementowana w nakładce o nazwie
<e>libata</e>, która znajduje się pod podsystemem SCSI. Z tego powodu
sterowniki SATA znajdują się w tej samej sekcji co sterowniki SCSI. Dodatkowo,
wszystkie inne urządzenia przechowujące dane są traktowane jako urządzenia
SCSI, a zatem potrzebują obsługi dysków/cd-romów SCSI. Dysk twardy SATA ma w
systemie nazwę (na przykład) <c>/dev/sda</c>, a dysk SATA CD/DVD
<c>/dev/sr0</c>.
</p>

<p>
Chociaż większość tych sterowników obsługuje kontrolery SATA, libata nie
została napisana tylko dla SATA. W niedalekiej przyszłości wszystkie sterowniki
IDE również będą przepisane na libata.
</p>

<pre caption="Konfiguracja libata">
Device Drivers  ---&gt;
 SCSI device support  ---&gt;
  &lt;*&gt; SCSI device support
  &lt;*&gt;   SCSI disk support
  &lt;*&gt;   SCSI CDROM support

  SCSI low-level drivers  ---&gt;
   &lt;*&gt; Serial ATA (SATA) support
    <comment>Z poniższej listy należy wybrać chipset płyty głównej komputera</comment>
</pre>

</body>
</section>
<section>
<title>Chipsety IDE i DMA</title>
<body>

<p>
Pomimo pojawienia się urządzeń SATA, dyski IDE wciąż są bardzo popularne i
używane przez bardzo wiele osób. IDE to dość typowy sprzęt, zatem Linux
obsługuje niemal wszystkie jego typy bez konieczności wybierania jakichkolwiek
dodatkowych opcji.
</p>

<p>
Niestety, IDE to stara technika i w związku w tym <e>nie jest w stanie</e>
obsługiwać szybkich transferów jakie zapewniają nowe urządzenia. Sterownik IDE
jest ograniczony do prędkości standardu PIO co nie tylko powoduje, że wymiana
danych odbywa się stosunkowo wolno, ale też wywołuje duże obciążenie
procesora.
</p>

<p>
Jeśli komputer został wyprodukowany po 1995 roku, jego kontroler IDE powinien
posiadać jeszcze jeden standard przesyłu danych bezpośredniego dostępu do
pamięci (<e>Direct Memory Access</e>) nazywany zwykle skrótowo DMA. Jest on
znacznie szybszy i prawie wcale nie zużywa zasobów procesora. Jeśli system
działa strasznie wolno i korzysta się z dysku IDE, najbardziej prawdopodobnym
źródłem problemu jest właśnie nieużywanie DMA.
</p>

<pre caption="Sprawdzanie czy DMA jest włączone">
# <i>hdparm -d /dev/hda</i>

/dev/hda:
 using_dma    =  0 (off)
</pre>

<p>
Aby włączyć DMA dla urządzeń IDE, wystarczy zaznaczyć w konfiguracji jądra
odpowiedni kontroler IDE.
</p>

<pre caption="Konfiguracja kontrolera IDE">
Device Drivers  ---&gt;
 ATA/ATAPI/MFM/RLL support  ---&gt;
  &lt;*&gt; ATA/ATAPI/MFM/RLL support
  &lt;*&gt;   Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support
  [*]     PCI IDE chipset support
  [*]       Generic PCI bus-master DMA support
    <comment>Należy wybrać odpowiedni chipset z poniższej listy</comment>
</pre>

</body>
</section>
<section>
<title>Kontrolery USB</title>
<body>

<p>
<uri link="http://en.wikipedia.org/wiki/USB">USB</uri> to szeroko stosowane
złącze, które umożliwia podłączenie do komputera dużej ilości różnych
zewnętrznych urządzeń peryferyjnych. Jednym z powodów sukcesu USB jest fakt, że
jest bardzo ustandaryzowany, chociaż urządzenia kontrolera (<e>host controller
devices</e>) nieco się między sobą różnią. Występują ich trzy typy:
</p>

<ul>
  <li>
    <c>UHCI</c> (Universal Host Controller Interface) zapewnia obsługę USB 1.1
    i jest używane w płytach VIA oraz Intel.
  </li>
  <li>
    <c>OHCI</c> (Open Host Controller Interface) zapewnia obsługę USB 1.1 w
    płytach głównych opartych na chipsetach Nvidia i SiS.
  </li>
  <li>
    <c>EHCI</c> (Extended Host Controller Interface) to jeden wspólny
    kontroler dla USB 2.0, który jest stosowany we wszystkich płytach głównych
    obsługujących USB 2.0.
  </li>
</ul>

<p>
Większość komputerów posiada dwa z trzech wymienionych wyżej interfejsów. EHCI
(USB 2.0) oraz UHCI lub OHCI (USB 1.1). Ważne jest, aby zaznaczyć w
konfiguracji obsługę obu typów kontrolera występujących w komputerze. Wszystkie
urządzenia USB 2.0 są kompatybilne z USB 1.1, ale spora część urządzeń USB 1.1
nie działa pod USB 2.0 - bo i po co myszce transfery szybsze niż 1.5mbit na
sekundę?
</p>

<p>
Jeśli nie wybierze się odpowiednich sterowników dla używanych typów USB HCD,
porty USB nie będą działały, a podłączone do nich urządzenia nie dostaną
zasilania, ani nie będą w stanie się komunikować z komputerem.
</p>

<p>
Dzięki pewnej sztuczce związanej z <c>lspci</c> (z pakietu
<c>sys-apps/pciutils</c>) wykrywanie używanych HCD jest banalnie proste.
Ignorując kontroler FireWire, który również spełniał warunki zapytania,
odczytujemy, że system używa OHCI i EHCI:
</p>

<pre caption="Wykrywanie typu HCD za pomocą lspci">
# <i>lspci -v | grep HCI</i>
00:02.0 USB Controller: nVidia Corporation CK804 USB Controller (rev a2) (prog-if 10 <i>[OHCI]</i>)
00:02.1 USB Controller: nVidia Corporation CK804 USB Controller (rev a3) (prog-if 20 <i>[EHCI]</i>)
01:0b.0 FireWire (IEEE 1394): Agere Systems FW323 (rev 61) (prog-if 10 [OHCI])
</pre>

<pre caption="Konfiguracja USB HCD">
Device Drivers  ---&gt;
 USB support  ---&gt;
  &lt;*&gt; Support for Host-side USB
  ---   USB Host Controller Drivers
  &lt;*&gt;   EHCI HCD (USB 2.0) support
  &lt;*&gt;   OHCI HCD support
  &lt;*&gt;   UHCI HCD (most Intel and VIA) support
  <comment>Należy zaznaczyć obsługę używanych w systemie HCD - można zaznaczyć wszystkie trzy jeśli się nie wie, które wybrać</comment>
</pre>

</body>
</section>
<section>
<title>Systemy z wieloma procesorami, hiperwątkowość, dwurdzeniowość</title>
<body>

<p>
Wiele komputerów posiada więcej niż jeden procesor, ale nie zawsze jest to
bardzo oczywiste.
</p>

<ul>
  <li>
    Wiele procesorów Intela posiada tak zwany <uri
    link="http://en.wikipedia.org/wiki/Hyperthreading">hyper-threading</uri>,
    czyli hiperwątkowość, co powoduje, że jeden fizyczny procesor jest
    traktowany w systemie jak dwa <e>logiczne</e> procesory.
  </li>
  <li>
    Niektóre najnowsze procesory Intela i AMD składają się faktycznie z kilku
    fizycznych procesorów wewnątrz jednego opakowania. Są one nazywane
    procesorami <uri link="http://en.wikipedia.org/wiki/Dual_core">dual
    core</uri> - czyli dwurdzeniowymi.
  </li>
  <li>
    Niektóre najnowocześniejsze komputery posiadają kilka fizycznych procesorów
    zainstalowanych na jednej specjalnej płycie głównej, co powoduje znaczny
    wzrost wydajności pracy w stosunku do systemów <e>jednoprocesorowych</e>.
    Użytkownik zwykle doskonale wie, że posiada taki komputer, gdyż nie są one
    tanie.
  </li>
</ul>

<p>
We wszystkich tych przypadkach należy zaznaczyć odpowiednie opcje w jądrze, aby
wykorzystać maksimum wydajności oferowanej przez taki sprzęt.
</p>

<pre caption="Konfiguracja wieloprocesorowości">
Processor type and features  ---&gt;
 [*] Symmetric multi-processing support
 <comment>Opcję powyżej należy zaznaczyć w każdym z opisanych powyżej przypadków</comment>
 [*]   SMT (Hyperthreading) scheduler support
 <comment>Ta opcja dotyczy procesorów z hiperwątkowością (HT)</comment>
 [*]   Multi-core scheduler support (NEW)
 <comment>Ta opcja dotyczy systemów dwurdzeniowych (dual core)</comment>
</pre>

</body>
</section>
<section>
<title>x86, obsługa dużej ilości pamięci</title>
<body>

<p>
W związku z ograniczeniami 32-bitowej przestrzeni adresowej architektury x86,
domyślna konfiguracja jądra obsługuje maksymalnie 896MB pamięci RAM. Jeśli w
komputerze zainstalowano więcej pamięci, tylko 896MB z niej będzie używane do
czasu włączenia opcji "High Memory Support".
</p>

<note>
To ograniczenie występuje tylko na architekturze x86 (IA32). Inne architektury
nie mają problemów z obsługą większych ilości pamięci.
</note>

<p>
Opcja ta nie jest włączana domyślnie, ponieważ powoduje pewien narzut na
wydajność systemu. Nie należy się tym jednak przejmować. Korzyść z posiadania
większej ilości pamięci znacznie przewyższe koszta jej obsługi.
</p>

<pre caption="Obsługa większej ilości pamięci na x86">
Processor type and features  ---&gt;
 High Memory Support  ---&gt;
  (X) 4GB
  ( ) 64GB
  <comment>Opcja 4GB dotyczy wszystkich sytuacji, gdy system posiada mniej niż 4GB pamięci</comment>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Inne dokumenty dotyczące konfiguracji jądra</title>
<section>
<body>

<p>
Jak dotąd omówiliśmy tylko ogólne sprawy i kilka specyficznych problemów
związanych z konfiguracją jądra, raczej bez wdawania się w niepotrzebne
szczegóły. Niektóre tematy związane z konfiguracją jądra są tak kompleksowe, że
wymagają osobnych dokumentów - i takie dokumenty należą do dokumentacji Gentoo.
</p>

<p>
Dokumenty te mogą sporo pomóc przy konfiguracji tych specyficznych opcji, do
których się odnoszą. Jeśli jednak nie jest się doświadczonym użytkownikiem, nie
należy za bardzo na ich podstawie zmieniać konfiguracji jądra. Warto zacząć od
obsługi podstawowych urządzeń i programów, a dopiero później stopniowo dodawać
obsługę dźwięku, drukowania i tym podobnych, gdy już się upewni, że nowe jądro
działa.
</p>

<ul>
  <li>
    <uri link="/doc/pl/alsa-guide.xml">Konfiguracja sterowników ALSA w
    Gentoo</uri> zawiera opis konfiguracji jądra jaką należy przeprowadzić w
    celu włączenia obsługi karty dźwiękowej. ALSA to jeden z wyjątków od
    sugerowanego niebudowania sterowników w modułach. Znacznie łatwiej ją
    konfigurować gdy poszczególne jej komponenty są modułami.
  </li>
  <li>
    <uri link="/doc/pl/bluetooth-guide.xml">Bluetooth w Gentoo Linux</uri> to
    tekst opisujący opcje niezbędne do współpracy komputera z urządzeniami
    bluetooth.
  </li>
  <li>
    <uri link="/doc/pl/ipv6.xml">Router IPv6 na Gentoo</uri> to tekst
    zawierający informacje niezbędne do włączenia obsługi routingu za pomocą
    ipv6.
  </li>
  <li>
    Użytkownicy firmowych sterowników do kart graficznych nVidia powinni
    zapoznać się z tekstem zatytułowanym <uri
    link="/doc/pl/nvidia-guide.xml">Konfiguracja kart nVidia w Gentoo</uri>,
    który zawiera opis tego co powinno i tego co nie powinno być włączone w
    konfiguracji jądra, aby te sterowniki mogły działać.
  </li>
  <li>
    Warto również zapoznać się z opisem <uri
    link="/doc/pl/power-management-guide.xml">zarządzania zasilaniem</uri>,
    który zawiera instrukcje konfiguracji jądra związanej z funkcjami zmiany
    częstotliwości procesora, usypiania i hibernacji komputera.
  </li>
  <li>
    Dokument <uri link="/doc/pl/gentoo-ppc-faq.xml">PPC FAQ</uri> zawiera kilka
    rozdziałów na temat konfiguracji jądra na tej architekturze.
  </li>
  <li>
    Tekst <uri link="/doc/pl/printing-howto.xml">Drukowanie w Gentoo</uri>
    opisuje opcje związane ze sterownikami do drukarek.
  </li>
  <li>
    Tekst <uri link="/doc/pl/usb-guide.xml">Konfiguracja urządzeń USB w Gentoo
    Linux</uri> szczegółowo opisuje korzystanie pod Linuksem z
    najpopularniejszych urządzeń USB takich jak klawiatury, myszki, karty
    pamięci czy drukarki.
  </li>
</ul>

</body>
</section>
</chapter>

<chapter>
<title>Problemy</title>
<section>
<title>Zmiany w konfiguracji nie odnoszą skutku</title>
<body>

<p>
To częsty problem. Użytkownik dokonuje zmian w konfiguracji, ale potem popełnia
po drodze jakiś drobny błąd, w rezultacie którego zamiast uruchomić system z
jądrem, które właśnie zbudował, uruchamia go z jakiegoś innego obrazu. Wtedy
zauważa, że pomimo zmiany w konfiguracji jądra ich problem wciąż istnieje i
wnioskuje z tego, że zmiany tej konfiguracji nie wpływają na jego problem.
</p>

<p>
Proces kompilowania i instalowania jądra nie leży w gestii tego dokumentu,
można o nim szczegółowo przeczytać w tekście <uri
link="/doc/pl/kernel-upgrade.xml">Aktualizacja jądra w systemie Gentoo</uri>. W
skrócie proces ten polega na konfiguracji jądra, kompilacji, montowaniu
partycji /boot, kopiowaniu na nią obrazu jądra i ponownym uruchomieniu
komputera. Jeśli któraś z tych czynności zostanie pominięta, zmiany nie odniosą
skutku.
</p>

<p>
Możliwe jest sprawdzenie czy jądro, z którego uruchomiono system jest tym
samym, które znajduje się na dysku, bazując na dacie i godzinie kompilacji.
Zakładając, że używana architektura to x86, a źródła jądra są w katalogu
<path>/usr/src/linux</path>:
</p>

<pre caption="Sprawdzanie jądra">
# <i>uname -v</i>
#4 SMP PREEMPT Sat Jul 15 08:49:26 BST 2006
<comment>Powyższe polecenie wyświetli datę i godzinę skompliowania jądra, z którego uruchomiono system</comment>

# <i>ls -l /usr/src/linux/arch/i386/boot/bzImage</i>
-rw-r--r-- 1 dsd users 1504118 Jul 15 08:49 /usr/src/linux/arch/i386/boot/bzImage
<comment>Powyższe polecenie wyświetli datę i godzinę skompliowania jądra, które znajduje się na dysku</comment>
</pre>

<p>
Jeśli czas ten różni się o więcej niż dwie minuty, oznacza to, że podczas
instalacji jądra popełniono błąd i że obraz jądra, którego się używa nie jest
tym, którego chce się używać.
</p>

</body>
</section>
<section>
<title>Moduły nie ładują się automatycznie</title>
<body>

<p>
Jak już wspominaliśmy wcześniej w tym dokumencie, ustawienie jednej z opcji
jądra do zbudowania jako moduł (M) zamiast wbudowania jej na stałe (Y) wiąże
się ze sporymi utrudnieniami. Warto powtórzyć to ostrzeżenie, gdyż wielu
użytkowników ma przez takie postępowanie problemy.
</p>

<p>
Gdy sterownik jest wbudowany w jądro, jego kod znajduje się bezpośrednio w
jego obrazie (bzImage). Kiedy jądro potrzebuje z niego skorzystać, po prostu go
ładuje bez potrzeby jakiejkolwiek ingerencji ze strony użytkownika.
</p>

<p>
Kiedy sterownik budujemy jako moduł, kod znajduje się w zewnętrzym pliku
zainstalowanym gdzieś w systemie plików. Kiedy jądro chce z niego skorzystać,
nie jest w stanie, ponieważ, z kilkoma wyjątkami, nie robi nic by go najpierw
załadować do pamięci. Tę czynność pozostawia użytkownikowi.
</p>

<p>
Zatem jeśli na przykład obsługa karty sieciowej została zbudowana jako moduł, a
następnie okazuje się, że nie działa połączenie sieciowe, najbardziej
prawdopodobnym powodem jest to, że moduł ze sterownikiem karty sieciowej nie
został załadowany podczas uruchamiania systemu.
</p>

<p>
Dlatego warto zaoszczędzić sobie tych kilku straconych na naprawy minut i
wbudowywać wszystkie sterowniki na stałe w jądro, tak żeby system mógł z nich
korzystać za każdym razem gdy są mu potrzebne.
</p>

</body>
</section>
</chapter>
</guide>
