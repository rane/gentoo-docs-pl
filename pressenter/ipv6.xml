<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">
<!-- $Header: /var/cvsroot/gentoo/xml/htdocs/doc/pl/ipv6.xml,v 1.10 2007/03/11 23:46:06 shadoww Exp $ -->

<guide link="/doc/pl/ipv6.xml" lang="pl">
<title>Router IPv6 w Gentoo</title>

<author title="Deweloper">
  <mail link="latexer@gentoo.org">Peter Johanson</mail>
</author>
<author title="Redaktor">
  <mail link="peesh@gentoo.org">Jorge Paulo</mail>
</author>
<author title="Redaktor, Recenzent">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Redaktor">
  <mail link="cam@gentoo.org">Camille Huot</mail>
</author>
<author title="Redaktor">
  <mail link="okun@hack.fi">Pasi Valminen</mail>
</author>
<author title="Tłumaczenie">
  Paweł Seremak
</author>

<abstract>
Ten przewodnik pokazuje jak skonfigurować IPv6 w Gentoo. Znajdziemy tutaj
również informacje na temat: tworzenia tunelu przy pomocy "pośrednika tuneli",
podstawowej konfiguracji DNS oraz konfiguracji klientów w sieci IPv6.
</abstract>

<license/>

<version>1.4</version>
<date>2007-05-30</date>

<chapter>
<title>Przygotowania</title>
<section>
<title>Podstawowa konfiguracja jądra</title>
<body>

<p>
Wszystkie wersje jądra z serii 2.6 dostępne w Gentoo wspierają
połączenia IPv6. Nowa łata USAGI IPv6 jest zintegrowana z jądrem Linuksa
począwszy od wersji 2.6.0.
</p>

<pre caption="Instalowanie jądra">
# <i>emerge gentoo-sources</i>
</pre>

<p>
Teraz jesteśmy gotowi, aby włączyć odpowiednie opcje w konfiguracji jądra.
</p>

<pre caption="Konfigurowanie jądra Linuksa">
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
</pre>

<note>
Zakładając, że dowiązanie symboliczne <path>/usr/src/linux</path> wskazuje na
źródła, z których będziemy korzystać).
</note>

<note>
Upewniamy się, że <path>Prompt for development and/or incomplete
code/drivers</path> jest włączone w konfiguracji jądra.
</note>

<pre caption="Opcje 'make menuconfig'">
Device Drivers ---&gt;
Networking support ---&gt;
Networking options ---&gt;
   &lt;*&gt; The IPv6 protocol (EXPERIMENTAL)
<comment>(Poniższe opcje IPv6 mogą być przydatne do wielu niestandardowych
zastosowań, choć nie są potrzebne do podstawowej konfiguracji)</comment>

<comment>(Ta opcja jest wymagana jedynie w przypadku, kiedy używamy ptrtd do
konwersji 6to4)</comment> [*] Network device support
   &lt;*&gt; Universal TUN/TAP device driver support
</pre>

</body>
</section>

<section>
<title>Testowanie wsparcia dla IPv6</title>
<body>

<p>
Po ustawieniu rekomendowanych opcji, należy przekompilować jądro i uruchomić
ponownie system.
</p>

<p>
Jeżeli nie posiadamy jeszcze zainstalowanego <b>iproute2</b> zalecamy zrobić to
teraz. Iproute2 jest najwygodniejszym konfiguratorem sieci opartej o <c>ip</c>.
Bardzo dobra alternatywa dla <c>ifconfig</c>, <c>route</c>, <c>iptunnel</c> i
innych...</p>

<pre caption="Instalowanie iproute2">
# <i>emerge sys-apps/iproute2</i>
</pre>

<warn>
Używanie narzędzia ifconfig w przypadku, kiedy posiadamy tunel zbudowany z wielu
urządzeń może być bardzo niewygodne. Będziemy zmuszeni do usuwania tunelu w
odwrotnej kolejności. Znaczy to, że połączenia stworzone najpóźniej muszą zostać
usunięte w pierwszej kolejności. Należy zwrócić na to uwagę!
</warn>

<p>
Jeżeli IPv6 działa poprawnie, to interfejs pętli zwrotnej (ang. loopback device)
powinien pokazać adres IPv6.
</p>

<pre caption="Sprawdzenie interfejsu urządzenia zapętlającego (ang. loopback device)">
# <i>ip -6 addr show lo</i>
1: lo: &lt;LOOPBACK,UP&gt; mtu 16436
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
    <comment>(Powyższe wiersze pokazują, że wszystko działa poprawnie)</comment>
</pre>

<p>
Zanim przejdziemy dalej należy upewnić się, że dodaliśmy flagę <e>ipv6</e> do
zmiennej USE w pliku <path>make.conf</path>. Dzięki temu, pakiety instalowane
później będą posiadały wsparcie dla IPv6.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Konfigurowanie tunelu</title>
<section>
<title>Konfiguracja podstawowa</title>
<body>

<p>
Większość dostawców internetu nie oferuje natywnych połączeń IPv6. Aby ominąć te
ograniczenie, można skorzystać z tzw. "pośredników tunelowych" oferujących
darmowe tunele IPv6. Dzięki temu możemy tunelować wszystkie swoje połączenia
IPv6 do sieci IPv4.
</p>

<table>
  <tr>
    <th>Pośrednik</th>
    <th>Lokalizacja</th></tr>
  <tr>
    <ti><uri link="http://tunnelbroker.net/">Hurricane Electric</uri></ti>
    <ti>US/Kanada</ti>
  </tr>
  <tr>
    <ti><uri link="http://www.freenet6.net/">Freenet6</uri></ti>
    <ti>US</ti>
  </tr>
  <tr>
    <ti><uri link="http://www.sixxs.net/">Sixxs</uri></ti>
    <ti>Europa</ti>
  </tr>
  <tr>
    <ti><uri link="http://tunnel-broker.singnet.com.sg/">Singnet</uri></ti>
    <ti>Singapur</ti>
  </tr>
  <tr>
    <ti><uri link="http://broker.aarnet.net.au/">Aarnet</uri></ti>
    <ti>Australia/Południowy Pacyfik</ti>
  </tr>
</table>

<p>
Poniżej przedstawiamy dwie przykładowe konfiguracje tuneli korzystających z
Hurricane Electric (analogiczne do Sixxs) oraz Freenet6.
</p>

</body>
</section>

<section>
<title>Hurricane Electric</title>
<body>

<p>
Hurricane Electric (zwane dalej HE) oferuje darmowe tunele IPv6  oraz przydziela
maskę /64 na nasze adresy. Umożliwia również konfigurację odwrotnego DNS.
Rejestracja tunelu HE jest bardzo prosta, wystarczy wypełnić formularz
znajdujący się pod tym adresem: <uri>http://www.tunnelbroker.net/</uri>.
</p>

<note>
Rejestracja wymaga podania informacji takich jak: Twój adres i telefon.
</note>

<warn>
Aktywacja tunelu HE trwa 24 godziny.
</warn>

<p>
Jeżeli tunel został zatwierdzony i przydzielono nam maskę /64, możemy przejść
do konfiguracji systemu. HE dostarcza wzór konfiguracji opartej o narzędzia
ifconfig i iproute. Następne dwa przykłady zakładają, że posiadamy właśnie taką
konfigurację:
</p>

<table>
  <tr>
    <ti>Lokalny adres IPv4 (eth0)</ti>
    <ti>68.36.91.195</ti>
  </tr>
  <tr>
    <ti>Adres IPv4 HE</ti>
    <ti>64.71.128.82</ti>
  </tr>
  <tr>
    <ti>Adres lokalnego tunelu IPv6</ti>
    <ti>2001:470:1F00:FFFF::189</ti>
  </tr>
  <tr>
    <ti>Blok IPv6</ti>
    <ti>2001:470:1F00:296::/64</ti>
  </tr>
</table>

<p>
Używając narzędzia iproute2 i komendy <c>ip</c>, wykonujemy poniższe polecenia:
</p>

<pre caption="Konfiguracja tunelu IPv6">
<comment>(Tworzenie tunelu pomiędzy lokalnym IPv4 (eth0) a adresem IPv4 HE)</comment>
# <i>ip tunnel add sixbone mode sit remote 64.71.128.82 local 68.36.91.195 ttl 64 dev eth0</i>
<comment>(Pobieramy z MTU wartość nagłówka tunelowania)</comment>
# <i>ip link set sixbone mtu 1280</i>
<comment>(Tworzenie tunelu)</comment>
# <i>ip link set sixbone up</i>
<comment>(Przypisanie adresu IPv6 do tunelu)</comment>
# <i>ip addr add 2001:470:1F00:FFFF::189 dev sixbone</i>
<comment>(Przekierowanie wszystkich globalnych adresów IPv6 przez tunel 'sixbone')</comment>
# <i>ip route add 2000::/3 dev sixbone</i>
</pre>

</body>
</section>

<section>
<title>Freenet6</title>
<body>

<p>
<uri link="http://www.freenet6.net/">Freenet6</uri> jest alternatywnym darmowym
pośrednikiem tuneli. Podczas procesu rejestracji wymagane jest jedynie podanie
nazwy użytkownika oraz prawidłowego adresu e-mail. Funkcjonowanie tunelu odbywa
się na zasadzie klient/serwer. Klient nosi nazwę <c>tspc</c> i jest dostępny w
portage. Aby go zainstalować wystarczy:
</p>

<pre caption="Instalacja klienta Freenet6">
# <i>emerge freenet6</i>
</pre>

<p>
Pozostało nam tylko wyedytowanie pliku <path>/etc/freenet6/tspc.conf</path> w
celu dokończenia instalacji. Musimy zmienić pola <e>userid</e> i <e>passwd</e>
na te, które dostarczyło nam Freenet6. Poniżej  przykładowy plik konfiguracyjny:
</p>

<pre caption="Przykładowy plik tspc.conf">
tsp_version=1.0.1
tsp_dir=/etc/freenet6
auth_method=any
client_v4=auto
<i>userid=anonymous</i>
<i>passwd=foobar</i>
template=gentoo
server=tsps1.freenet6.net
retry_delay=0
if_tunnel=sit3
</pre>

</body>
</section>

<section>
<title>Testowanie połączenia</title>
<body>

<p>
Teraz tunel jest skonfigurowany i możemy go przetestować. Do tego celu zalecamy
użycie narzędzia <c>ping6</c>. Wystarczy spingować dowolny host z adresem IPv6.
</p>

<pre caption="Testowanie połączenia">
# <i>emerge iputils</i>
# <i>ping6 www.kame.net</i>
PING www.kame.net(orange.kame.net) 56 data bytes
64 bytes from orange.kame.net: icmp_seq=1 ttl=52 time=290 ms
64 bytes from orange.kame.net: icmp_seq=2 ttl=52 time=277 ms
64 bytes from orange.kame.net: icmp_seq=3 ttl=52 time=280 ms
64 bytes from orange.kame.net: icmp_seq=4 ttl=52 time=279 ms
64 bytes from orange.kame.net: icmp_seq=5 ttl=52 time=277 ms

--- www.kame.net ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4038ms
rtt min/avg/max/mdev = 277.040/281.041/290.046/4.699 ms
</pre>

<p>
Prowadzone są ciągłe prace nad udoskonaleniem wsparcie IPv6 dla sieciowych
skryptów init. By dowiedzieć się więcej o postępie prac lub udzielić cennych
wskazówek, należy wysłać e-maila pod adres: <mail
link="latexer@gentoo.org">latexer@gentoo.org</mail>.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Wsparcie IPv6 w aplikacjach</title>
<section>
<title>Ponowna instalacja pakietów</title>
<body>

<p>
Jeżeli przed konfiguracją systemu flaga <e>USE="ipv6"</e> była wyłączona w
pliku <path>/etc/make.conf</path>, należy przeinstalować niektóre pakiety w
celu wkompilowania wsparcia dla IPv6.  Aby zdobyć listę wszystkich
zainstalowanych pakietów, których działanie zależy od opcji <e>ipv6</e> w
zmiennej USE, dodajemy do opcji emerge parametr <c>--newuse</c>
(<c>-N</c>):
</p>

<pre caption="Lista pakietów do przebudowania">
# <i>emerge -uDNav world</i>
</pre>

<p>
Jeśli zmieniło się wiele flag, lista może być naprawdę długa. System powinien
być możliwie aktualny, dlatego warto przebudować wszystkie pakiety z listy w
tym momencie.
</p>

<note>
Niektóre pakiety wykrywają wsparcie IPv6 automatycznie bez względu na flagę ipv6
w zmiennej USE. Tak więc nie wszystkie pakiety, które powinny posiadać wsparcie
dla IPv6 będą je miały, jeżeli w jądrze nie będzie wkompilowana obsługa IPv6.
</note>

</body>
</section>

<section>
<title>Specyficzne pakiety wspierające IPv6</title>
<body>

<p>
Istnieje pare pakietów, które zostały napisane pod kątem IPv6. Większość z nich
można znaleźć w katalogu <path>/usr/portage/net-misc</path>.
</p>

<table>
<tr><th>Pakiet</th><th>Opis</th></tr>
<tr>
  <ti>net-misc/ipv6calc</ti>
  <ti>Konwertuje adres IPv6 do formatu skompresowanego.</ti>
</tr>
<tr>
  <ti>net-misc/netcat6</ti>
  <ti>Wersja netcat, która wspiera IPv4 i IPv6.</ti>
</tr>
<tr>
  <ti>dev-perl/Socket6</ti>
  <ti>
    Rozszerzenie IPv6 dla C socket.h.
  </ti>
</tr>
</table>

</body>
</section>
</chapter>

<chapter>
<title>Konfigurowanie DNS</title>
<section>
<title>DNS i IPv6</title>
<body>

<p>
DNS dla przechowywania adresów IPv4 używa rekordów A,a dla IPv6 AAAA. (Wynika to
z tego, że wielkość adresu IPv4 wynosi 2^32, a IPv6 2^128). Dla odwróconego
DNS (ang. reverse DNS) standard INT wypierany jest przez nowy ARPA, ale mimo to
ciągle jest szeroko wspierany. Ten rozdział jest pisany pod kątem ARPA.
</p>

</body>
</section>
<section>
<title>Konfiguracja programu BIND</title>
<body>

<p>
Nowe wersje narzędzia BIND posiadają doskonałe wsparcie dla IPv6. Ten rozdział
zakłada, że posiadamy minimalną wiedzę na temat jego konfiguracji i używania
programu BIND. Jeżeli uruchamiamy program BIND w środowisku chroot, musimy dodać
odpowiedni prefiks do większości ścieżek w tej części.
</p>

<p>
Na początek musimy dodać odpowiednie wpisy dla obu stref DNS (zwykłej i
odwrotnej (ang. forward and reverse) w pliku <path>/etc/bind/named.conf</path>.
</p>

<pre caption="Wpisy do named.conf">
<comment>(Ustawiamy tak, aby BIND nasłuchiwał adresów IPv6. Jedyną możliwością
aby to zrobić w BIND-9.3 jest użycie słowa 'any')</comment>
options {
    [...]
    listen-on-v6 { any; }
    [...]
};
<comment>(To jest wpis obsługujący domene 'ipv6-rules.com':)</comment>
zone "ipv6-rules.com" IN {
    type master;
    file "pri/ipv6-rules.com";
};
<comment>(Ten format nosi nazwę "bitwise" i jest wykorzystywany przez odwrócony
DNS. Jest tworzony przez wzięcie prefiksu IPv6, odwrócenie porządku i
postawienie kropki między znakami)</comment>
zone "6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa" {
        type master;
        file "pri/rev-ipv6-rules.com.arpa";
};
</pre>

<p>
Teraz musimy stworzyć plik ze strefą i dodać odpowiednie wpisy dla wszystkich
naszych hostów:
</p>

<pre caption="pri/ipv6-rules.com">
$TTL    2h
@       IN      SOA     ipv6-rules.com. webmaster.ipv6-rules.com.  (
                                2003052501 ; Numer seryjny
                                28800      ; Odświeżenie
                                14400      ; Ponowienie
                                3600000    ; Wygaśnięcie
                                86400 )    ; Minimum
                NS      ns1.ipv6-rules.com

        IN      AAAA    2001:470:1f00:296::1 ; adres dla ipv6-rules.com
host1   IN      AAAA    2001:470:1f00:296::2 ; adres dla host1.ipv6-rules.com
host2   IN      AAAA    2001:470:1f00:296::3:3 ; adres dla host2.ipv6-rules.com
</pre>

<pre caption="pri/rev-ipv6-rules.com.arpa">
$TTL 3d ; Default TTL (Jest to wymagane przez Binda 8, a przez Binda 9 ignorowane)
@       IN SOA ipv6-rules.com. webmaster.ipv6-rules.com. (
                        2003052501      ; Number seryjny (YYYYMMdd)
                        24h             ; Czas odświeżenia
                        30m             ; Czas ponowienia
                        2d              ; Ważność
                        3d )            ; Domyślne TTL
        IN      NS     ns1.ipv6-rules.com.
;Wpis IPv6 PTR
$ORIGIN 6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa.

1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     ipv6-rules.com.
2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host1.ipv6-rules.com.
3.0.0.0.3.0.0.0.0.0.0.0.0.0.0.0 IN      PTR     host2.ipv6-rules.com.
</pre>

</body>
</section>

<section>
<title>Konfiguracja DJBDNS</title>
<body>

<p>
Pod adresem <uri link="http://www.fefe.de/dns/">http://www.fefe.de/dns/</uri> są
dostępne łatki do DJBDNS, które pozwalają na tworzenie domen IPv6. Podczas
instalowania DJBDNS z ustawioną flagą <e>ipv6</e> w zmiennej USE, łaty zostaną
automatycznie zastosowane.
</p>

<warn>
Na chwilę obecną nie wszystkie typy rekordów są obsługiwane przez te łaty, jak
np. niektóre rekordy NS i MX.
</warn>

<pre caption="Instalowanie djbdns">
# <i>emerge djbdns</i>
</pre>

<p>
Po zakończeniu instalacji, djbdns może być skonfigurowane poprzez uruchomienie
<c>tinydns-setup</c> i odpowiedzenie na pare prostych pytań takich jak: gdzie
zainstalować tinydns itp.
</p>

<pre caption="Ustawianie tinydns">
# <i>tinydns-setup</i>
</pre>

<p>
Przypuszczając, że zainstalowaliśmy <c>tinydns</c> w <path>/var/tinydns</path>,
możemy teraz wyedytować <path>/var/tinydns/root/data</path>. Plik ten będzie
zawierał wszystkie niezbędne informacje potrzebne do prawidłowego funkcjonowania
DNS IPv6.
</p>

<pre caption="Przykładowy plik data">
<comment>*.ipv6-rules.com jest przypisane do 192.168.0.1</comment>
.ipv6-rules.com:192.168.0.1:a:259200
<comment>Odwrócony DNS jest przypisany do 2001:470:1f00:296::/64</comment>
.6.9.2.0.0.0.f.1.0.7.4.0.1.0.0.2.ip6.arpa:192.168.0.1:a
<comment>Przypisanie adresów IP do hostów</comment>
6host1.ipv6-rules.com:200104701f0002960000000000000001:86400
6host2.ipv6-rules.com:200104701f0002960000000000000002:86400
<comment>Dowiązanie www do host1</comment>
3www.ipv6-rules.com:200104701f0002960000000000000002:86400
</pre>

<p>
Wiersze z prefiksem <c>6</c> stworzyłą oba rekordy AAAA i PTR. Te z prefiksem
<c>3</c> stworzą tylko rekord AAAA. Jednak zamiast edytować plik
<path>data</path> ręcznie, możemy użyć gotowych skryptów <c>add-host6</c> i
<c>add-alias6</c> do tworzenia wpisów. Po dokonaniu zmian w pliku
<path>data</path>, wystarczy uruchomić <c>make</c> z
<path>/var/tinydns/root</path>. Stworzony zostanie plik
<path>/var/tinydns/root/data.cfb</path>, którego tinydns będzie używało jako
źródła informacji dla zapytań DNS.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Router IPv6</title>
<section>
<title>Konfiguracja routingu</title>
<body>

<p>
Poniższa konfiguracja jest wymagana w przypadku kiedy zamierzamy uruchomić
router korzystający z ipv6. Musimy włączyć forwardowanie pakietów IPv6. Można
zrobić to na dwa sposoby.
</p>

<pre caption="Włączenie forwardowania">
# <i>echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</i>
lub
# <i>sysctl -w net.ipv6.conf.all.forwarding=1</i>
</pre>

<warn>
Skrypt init dla radvd włącza (i wyłącza) forwardowanie, przez co następny krok
można pominąć.
</warn>

<p>
Aby włączyć forwardowanie przy starcie systemu musimy zmodyfikować plik
<path>/etc/sysctl.conf</path> i dodać poniższy wiersz.
</p>

<pre caption="Edycja sysctl.conf">
<comment>(Jeżeli użyjemy radvd, ten krok będzie zbędny)</comment>
net.ipv6.conf.default.forwarding=1
</pre>

<p>
Teraz ruch pakietów powinien przebiegać przez tunel, który stworzyliśmy.
</p>

<p>
Specyfikacja IPv6 dopuszcza przypisywanie adresów IP na dwa sposoby: "stateful"
i "stateless". Przypisywanie typu "stateless" używa procesu zwanego "Router
Advertisement". Klient otrzymuje adres IP od razu po włączeniu interfejsu
sieciowego. Przypisanie takie nazywane jest "stateless", ponieważ nie tworzone
są rekordy, w których przechowuje się informacje o klientach i ich adresach IP.
Przypisanie typu "stateful" jest używane przez DHCPv6. Nazywa się "stateful",
gdyż pamiętane są informacje o poszczególnych klientach i ich adresach IP.
</p>

</body>
</section>
<section>
<title>Konfiguracja typu Stateless</title>
<body>

<p>
Konfiguracja tego typu jest stosowana przez Router Advertisement Daemon, lub
radvd.
</p>

<pre caption="Konfigurowanie radvd">
# <i>emerge radvd</i>
</pre>

<p>
Po zainstalowaniu radvd musimy stworzyć plik <path>/etc/radvd/radvd.conf</path>,
który będzie zawierał informacje dotyczące bloku IP, z którego przypisywane są
adresy IP. Poniżej przedstawiamy przykładowy plik <path>radvd.conf</path> z
prefiksem, który został nam przydzielony przez naszego pośrednika tunelowego.
</p>

<pre caption="Przykładowy plik radvd.conf">
interface eth1
{
        <comment>Wysłanie informacji do innych hostów</comment>
        AdvSendAdvert on;
        AdvLinkMTU 1280;
        MaxRtrAdvInterval 300;
        <comment>Prefiks podsieci, który został nam przydzielony przez PoP</comment>
        prefix 2001:470:1F00:296::/64
        {
                AdvOnLink on;
                AdvAutonomous on;
        };
};
</pre>

<warn>
Upewniamy się, że interfejs w pierwszym wierszu (w tym przypadku eth1) jest
skierowany do sieci wewnętrznej a nie do dostawcy internetu!
</warn>

<p>
Więcej informacji można znaleźć wywołując <c>man radvd.conf</c>. Możemy teraz
uruchomić radvd i ustawić automatyczne uruchamianie podczas startu systemu.
</p>

<pre caption="Uruchamianie radvd">
# <i>/etc/init.d/radvd start</i>
# <i>rc-update add radvd default</i>
</pre>

</body>
</section>

<section>
<title>Konfiguracja typu Stateful</title>
<body>

<p>
Jeżeli chcemy używać konfiguracji tego typu, musimy zainstalować i skonfigurować
dhcpv6.
</p>

<pre caption="Instalowanie dhcpv6">
# <i>emerge dhcpv6</i>
</pre>

<p>
Następnie musimy skonfigurować DHCPv6, edytując <path>/etc/dhcp6s.conf</path>.
</p>

<pre caption="Przykładowy plik dhcp6s.conf">
prefer-life-time 10000;
valid-life-time 20000;
renew-time 5000;
rebind-time 8000;
interface eth1 {
    link AAA {
        allow unicast;
        send unicast;
        allow rapid-commit;
        send server-preference 5;
        renew-time 1000;
        rebind-time 2400;
        prefer-life-time 2000;
        valid-life-time 3000;
        pool{
            range 2001:470:1f00:296::10 to 2001:470:1f00:296::110/64;
            prefix 2001:470:1f00:296::/64;
        };
    };
};
</pre>

<p>
Możemy teraz uruchomić dhcp6s i ustawić automatyczne uruchamianie podczas startu
systemu.
</p>

<pre caption="Uruchamianie dhcp6s">
# <i>/etc/init.d/dhcp6s start</i>
# <i>rc-update add dhcp6s default</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Klienci IPv6</title>
<section>
<title>Korzystanie z radvd</title>
<body>

<p>
Klienci podłączeni do tego typu routera powinni już uzyskać swoje adresy IPv6
(jeżeli tylko zgłosili żądanie) i mieć możliwość korzystania z sieci.
(Prawdopodobnie również posiadamy juz adres IPv6 dzięki skryptom init net.ethX)
</p>

<pre caption="Połączenie przez IPv6">
# <i>ip link set eth0 up</i>
# <i>ip addr show eth0</i>
1: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1400 qdisc pfifo_fast qlen 1000
    link/ether 00:01:03:2f:27:89 brd ff:ff:ff:ff:ff:ff
    inet6 2001:470:1f00:296:209:6bff:fe06:b7b4/128 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::209:6bff:fe06:b7b4/64 scope link
       valid_lft forever preferred_lft forever
    inet6 ff02::1/128 scope global
       valid_lft forever preferred_lft forever
</pre>

</body>
</section>
<section>
<title>Korzystanie z DHCPv6</title>
<body>

<p>
Jeżeli na routerze jest uruchomiony DHCPv6 każdy klient powinien mieć
zainstalowany pakiet dhcpv6. Poniżej przedstawiamy przykładowy plik
konfiguracyjny klienta <path>/etc/dhcp6c.conf</path>.
</p>

<pre caption="Przykładowy plik dhcp6c.conf">
interface eth0 {
        send rapid-commit;
        request domain-name-servers;
        iaid 11111;
        renew-time 11000;
};
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Używanie konwersji 6to4</title>
<section>
<title>Podstawowe zastosowanie</title>
<body>

<p>
Konwersja 6to4 może być użyta w przypadku komunikacji z adresem IPv4 przez
połączenie IPv6. Tak więc w sieci opartej o IPv6 można również używać adresów
IPv4 do komunikacji z resztą Świata.
</p>

</body>
</section>

<section>
<title>Konfiguracja DNS</title>
<body>

<p>
Aby uruchomić konwersję 6to4 należy uruchomić proxy DNS, <c>totd</c>, tak aby
zamieniało adresy IPv4 na adresy IPv6. Ta konwersja będzie służyła jedynie do
komunikacji z konwerterem proxy 6to4.
</p>

<p>
Jeżeli <c>totd</c> jest zamaskowaskowane przez KEYWORD <c>~x86</c>, należy
wpisać poniższą linijkę do pliku <path>/etc/portage/package.keywords</path>.
(Więcej informacji o tym pliku uzyskasz wpisując 'man portage') oraz Podręczniku
Gentoo.
</p>

<pre caption="Trwałe odmaskowanie totd w package.keywords">
net-misc/totd ~x86
</pre>

<p>
Instalujemy totd:
</p>

<pre caption="Instalowanie totd">
# <i>emerge totd</i>
</pre>

<p>
Następnie musimy ustawić parę podstawowych opcji w pliku
<path>/etc/totd.conf</path>.
</p>

<pre caption="Przykładowy plik /etc/totd.conf">
<comment>(Adres prawdziwego DNS)</comment>
forwarder 192.168.0.2 port 53
<comment>(Prefiks, który służy do identyfikacji adresu IPv4 w IPv6)</comment>
prefix 3ffe:abcd:1234:9876::
<comment>(Port, na którym ma zostać uruchomiony totd)</comment>
port 5005
<comment>(Jakiego pliku PID użyć)</comment>
pidfile /var/run/totd.pid
<comment>(Temp 6to4)</comment>
stf
</pre>

<note>
Jeżeli port 53 jest już używany przez inny program należy zmienić port
przeznaczony dla <c>totd</c>.
</note>

</body>
</section>
<section>
<title>Proxy 6to4</title>
<body>

<p>
<c>ptrtd</c> będzie używane jako proxy 6to4, umożliwiając komunikacje pomiędzy
wewnętrznym hostem IPv6 a zewnętrznym IPv4.
</p>

<pre caption="Instalowanie ptrtd">
# <i>emerge ptrtd</i>
</pre>

<p>
Teraz musimy ustawić w <c>ptrtd</c>, który prefiks (ten który ustawiliśmy w
<c>totd</c>) jest nieprawdziwy i służy do konwersji 6to4. Modyfikujemy
<path>/etc/conf.d/ptrtd</path> i ustawiamy  <c>IPV6_PREFIX</c>. Musi być to ten
sam prefix, który ustawiliśmy w <c>totd</c>.
</p>

<pre caption="Przykładowy plik /etc/ptrtd.conf">
IPV6_PREFIX="3ffe:abcd:1234:9876::"
</pre>

<p>
Możemy teraz uruchomić totd i ustawić automatyczne uruchamianie przy starcie
systemu.
</p>

<pre caption="Uruchamienie totd">
# <i>/etc/init.d/totd start</i>
# <i>rc-update add totd default</i>
</pre>

</body>
</section>
<section>
<title>Konfiguracja i testowanie klienta</title>
<body>

<p>
Teraz klienci mogą korzystać z dwóch typów adresów IPv4 oraz IPv6 przez
połączenie IPv6. Zakładając, że uzyskali adresy IPv6 od radvd, musimy dodać
odpowiedni wpis do DNS i ustalić domyślny cel dla adresów z fałszywym prefixem
(tym z totd i ptrtd). W pliku <path>/etc/resolv.conf</path> należy dodać adres
komputera, na którym uruchomiony jest <c>totd</c>.
</p>

<pre caption="Przykładowy plik /etc/resolv.conf">
nameserver 2001:470:1f00:296::1 <comment>(Serwer z uruchomionym totd)</comment>
</pre>

<p>
Aby przetestować działanie konwersji 6to4, sprawdzamy domenę, o której wiemy, że
adres jest IPv4.
</p>

<pre caption="Testowanie przykładowej domeny">
# <i>dig aaaa google.com</i>
;; ANSWER SECTION:
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3364
google.com.             300     IN      AAAA     3ffe:abcd:1234:9876::d8ef:3564
</pre>

<p>
Teraz ustawiamy domyślny kierunek dla wszystkich adresów z fałszywym prefiksem.
</p>

<pre caption="Dodanie domyślnego routera">
<comment>(Zakładając, że interfejsem IPv6 jest eth0)</comment>
# <i>ip route add 3ffe:abcd:1234:9876::/64 via 2001:470:1f00:296::1 dev eth0</i>
</pre>

<p>
Na koniec użyjemy narzędzia <c>ping6</c>, aby wypingować np. google.com i
zobaczyć czy wszystko działa prawidłowo.
</p>

<pre caption="Testowanie 6to4">
# <i>ping6 -c 2 google.com</i>
PING 3ffe:abcd:1234:9876::d8ef:3364(3ffe:abcd:1234:9876::d8ef:3364) 56 data bytes
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=1 ttl=54 time=0.106 ms
64 bytes from 3ffe:abcd:1234:9876::d8ef:3364: icmp_seq=2 ttl=54 time=0.090 ms

--- 3ffe:abcd:1234:9876::d8ef:3364 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.090/0.098/0.106/0.008 ms
</pre>

<note>
Aktualnie router z zainstalowanym <c>ptrtd</c> zwraca odpowiedź na nasz ping,
lecz to wystarczy aby stwierdzić, że wszystko działa poprawnie.
</note>

</body>
</section>
</chapter>

<chapter>
<title>Inne zasoby</title>
<section>
<body>

<p>
Istnieje wiele doskonałych stron związanych z tematyką IPv6. Poniżej
prezentujemy niektóre z nich.
</p>

<table>
<tr><th>Adres strony</th><th>Tematyka</th></tr>
<tr>
  <ti><uri link="http://www.ipv6.org/">www.ipv6.org</uri></ti>
  <ti>Ogólne informacje o IPv6</ti>
</tr>
<tr>
  <ti><uri link="http://www.linux-ipv6.org/">www.linux-ipv6.org/</uri></ti>
  <ti>Projekt USAGI</ti>
</tr>
<tr>
  <ti><uri link="http://www.deepspace6.net/">www.deepspace6.net</uri></ti>
  <ti>Linux/strona IPv6</ti>
</tr>
<!-- dead, was hacked<tr>
  <ti><uri link="http://www.hs247.com/">www.hs247.com</uri></ti>
  <ti>Wszystko co trzeba wiedzieć o IPv6</ti>
</tr>-->
<!-- dead, not responding<tr>
  <ti><uri link="http://www.ipv6-net.org/">www.ipv6-net.org</uri></ti>
  <ti>Niemiecka strona o IPv6</ti>
</tr>-->
<tr>
  <ti><uri link="http://www.kame.net/">www.kame.net</uri></ti>
  <ti>Implementacja *BSD</ti>
</tr>
</table>

<p>
Zapraszamy również na kanały IRC <c>#ipv6</c> w sieci
<uri link="http://www.freenode.net/">Freenode</uri>. Sieć Freenode obsługuje
również klientów łączących się bezpośrednio przez IPv6
(<b>irc.ipv6.freenode.net</b>).
</p>

</body>
</section>
</chapter>
</guide>
